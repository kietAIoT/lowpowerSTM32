
test_lowpower.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d28  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  08002e34  08002e34  00012e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003038  08003038  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08003038  08003038  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003038  08003038  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003038  08003038  00013038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800303c  0800303c  0001303c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003040  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  20000068  080030a8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  080030a8  00020284  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   000090ef  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c1c  00000000  00000000  000291c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a88  00000000  00000000  0002ade0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000080a  00000000  00000000  0002b868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001839f  00000000  00000000  0002c072  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cf4a  00000000  00000000  00044411  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087abf  00000000  00000000  0005135b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003230  00000000  00000000  000d8e1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000dc04c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e1c 	.word	0x08002e1c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08002e1c 	.word	0x08002e1c

0800014c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000154:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000158:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800015c:	f003 0301 	and.w	r3, r3, #1
 8000160:	2b00      	cmp	r3, #0
 8000162:	d013      	beq.n	800018c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000164:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000168:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800016c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000170:	2b00      	cmp	r3, #0
 8000172:	d00b      	beq.n	800018c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000174:	e000      	b.n	8000178 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000176:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000178:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d0f9      	beq.n	8000176 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000182:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000186:	687a      	ldr	r2, [r7, #4]
 8000188:	b2d2      	uxtb	r2, r2
 800018a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800018c:	687b      	ldr	r3, [r7, #4]
}
 800018e:	4618      	mov	r0, r3
 8000190:	370c      	adds	r7, #12
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr

08000198 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b086      	sub	sp, #24
 800019c:	af00      	add	r7, sp, #0
 800019e:	60f8      	str	r0, [r7, #12]
 80001a0:	60b9      	str	r1, [r7, #8]
 80001a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80001a4:	2300      	movs	r3, #0
 80001a6:	617b      	str	r3, [r7, #20]
 80001a8:	e009      	b.n	80001be <_write+0x26>
	{
//		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80001aa:	68bb      	ldr	r3, [r7, #8]
 80001ac:	1c5a      	adds	r2, r3, #1
 80001ae:	60ba      	str	r2, [r7, #8]
 80001b0:	781b      	ldrb	r3, [r3, #0]
 80001b2:	4618      	mov	r0, r3
 80001b4:	f7ff ffca 	bl	800014c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80001b8:	697b      	ldr	r3, [r7, #20]
 80001ba:	3301      	adds	r3, #1
 80001bc:	617b      	str	r3, [r7, #20]
 80001be:	697a      	ldr	r2, [r7, #20]
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	429a      	cmp	r2, r3
 80001c4:	dbf1      	blt.n	80001aa <_write+0x12>
	}
	return len;
 80001c6:	687b      	ldr	r3, [r7, #4]
}
 80001c8:	4618      	mov	r0, r3
 80001ca:	3718      	adds	r7, #24
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bd80      	pop	{r7, pc}

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d4:	f000 fd00 	bl	8000bd8 <HAL_Init>
  /* USER CODE BEGIN Init */
//  PinInit();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d8:	f000 f848 	bl	800026c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001dc:	f000 f908 	bl	80003f0 <MX_GPIO_Init>
  MX_I2C2_Init();
 80001e0:	f000 f8a2 	bl	8000328 <MX_I2C2_Init>
  MX_SPI1_Init();
 80001e4:	f000 f8ce 	bl	8000384 <MX_SPI1_Init>
//  MX_RTC_Init();
  /* USER CODE BEGIN 2 */

  PinInit();
 80001e8:	f000 f950 	bl	800048c <PinInit>
  MuaLed();
 80001ec:	f000 f9da 	bl	80005a4 <MuaLed>
  RTC_Init();
 80001f0:	f000 fa46 	bl	8000680 <RTC_Init>
//
//	  	RTC->ALRH = 0x0000U;
//	  	RTC->ALRL = 0x000AU;
//	  	SET_BIT(RTC->CRH, RTC_CRH_ALRIE);
//	  	SET_BIT(RTC->CRH, RTC_CRH_ALRIE);
	printf("RUN MODE\n");
 80001f4:	4816      	ldr	r0, [pc, #88]	; (8000250 <main+0x80>)
 80001f6:	f001 ffa1 	bl	800213c <puts>
//	HAL_Delay(1000);
	MuaLed();
 80001fa:	f000 f9d3 	bl	80005a4 <MuaLed>
//	SET_BIT(PWR->CR, PWR_CR_CSBF);
	SET_BIT(PWR->CR, PWR_CR_CWUF); //Quan trong bit này, vì sau khi nhận được sự kiện wakup thì phải tắt,
 80001fe:	4b15      	ldr	r3, [pc, #84]	; (8000254 <main+0x84>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	4a14      	ldr	r2, [pc, #80]	; (8000254 <main+0x84>)
 8000204:	f043 0304 	orr.w	r3, r3, #4
 8000208:	6013      	str	r3, [r2, #0]
	//Sự kiện WAKUP đo sđi, nếu không nó thấy rằng
//	SetAlarm();
	revise();
 800020a:	f000 fb17 	bl	800083c <revise>
	EnterStandBy();
 800020e:	f000 fa27 	bl	8000660 <EnterStandBy>
	printf("CHECK RTC_CRL_ALRG %d\n", READ_BIT(RTC->CRL, RTC_CRL_ALRF));
 8000212:	4b11      	ldr	r3, [pc, #68]	; (8000258 <main+0x88>)
 8000214:	685b      	ldr	r3, [r3, #4]
 8000216:	f003 0302 	and.w	r3, r3, #2
 800021a:	4619      	mov	r1, r3
 800021c:	480f      	ldr	r0, [pc, #60]	; (800025c <main+0x8c>)
 800021e:	f001 ff27 	bl	8002070 <iprintf>
	printf("CHEKC RTC_DIVL: %d\n", RTC->DIVL);
 8000222:	4b0d      	ldr	r3, [pc, #52]	; (8000258 <main+0x88>)
 8000224:	695b      	ldr	r3, [r3, #20]
 8000226:	4619      	mov	r1, r3
 8000228:	480d      	ldr	r0, [pc, #52]	; (8000260 <main+0x90>)
 800022a:	f001 ff21 	bl	8002070 <iprintf>
	printf("CHEKC RTC_CNTL: %d\n", RTC->CNTL);
 800022e:	4b0a      	ldr	r3, [pc, #40]	; (8000258 <main+0x88>)
 8000230:	69db      	ldr	r3, [r3, #28]
 8000232:	4619      	mov	r1, r3
 8000234:	480b      	ldr	r0, [pc, #44]	; (8000264 <main+0x94>)
 8000236:	f001 ff1b 	bl	8002070 <iprintf>
	printf("CHEKC RTC_ANRL: %d\n", RTC->ALRL);
 800023a:	4b07      	ldr	r3, [pc, #28]	; (8000258 <main+0x88>)
 800023c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800023e:	4619      	mov	r1, r3
 8000240:	4809      	ldr	r0, [pc, #36]	; (8000268 <main+0x98>)
 8000242:	f001 ff15 	bl	8002070 <iprintf>
	HAL_Delay(200);
 8000246:	20c8      	movs	r0, #200	; 0xc8
 8000248:	f000 fd28 	bl	8000c9c <HAL_Delay>
	printf("RUN MODE\n");
 800024c:	e7d2      	b.n	80001f4 <main+0x24>
 800024e:	bf00      	nop
 8000250:	08002e58 	.word	0x08002e58
 8000254:	40007000 	.word	0x40007000
 8000258:	40002800 	.word	0x40002800
 800025c:	08002e64 	.word	0x08002e64
 8000260:	08002e7c 	.word	0x08002e7c
 8000264:	08002e90 	.word	0x08002e90
 8000268:	08002ea4 	.word	0x08002ea4

0800026c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b094      	sub	sp, #80	; 0x50
 8000270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000272:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000276:	2228      	movs	r2, #40	; 0x28
 8000278:	2100      	movs	r1, #0
 800027a:	4618      	mov	r0, r3
 800027c:	f002 f83e 	bl	80022fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000280:	f107 0314 	add.w	r3, r7, #20
 8000284:	2200      	movs	r2, #0
 8000286:	601a      	str	r2, [r3, #0]
 8000288:	605a      	str	r2, [r3, #4]
 800028a:	609a      	str	r2, [r3, #8]
 800028c:	60da      	str	r2, [r3, #12]
 800028e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	2200      	movs	r2, #0
 8000294:	601a      	str	r2, [r3, #0]
 8000296:	605a      	str	r2, [r3, #4]
 8000298:	609a      	str	r2, [r3, #8]
 800029a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800029c:	2305      	movs	r3, #5
 800029e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002a6:	2300      	movs	r3, #0
 80002a8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80002aa:	2301      	movs	r3, #1
 80002ac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ae:	2301      	movs	r3, #1
 80002b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b2:	2302      	movs	r3, #2
 80002b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002bc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002c6:	4618      	mov	r0, r3
 80002c8:	f001 f8ec 	bl	80014a4 <HAL_RCC_OscConfig>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80002d2:	f000 fae9 	bl	80008a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d6:	230f      	movs	r3, #15
 80002d8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002da:	2302      	movs	r3, #2
 80002dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002de:	2300      	movs	r3, #0
 80002e0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002e6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e8:	2300      	movs	r3, #0
 80002ea:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ec:	f107 0314 	add.w	r3, r7, #20
 80002f0:	2102      	movs	r1, #2
 80002f2:	4618      	mov	r0, r3
 80002f4:	f001 fb58 	bl	80019a8 <HAL_RCC_ClockConfig>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80002fe:	f000 fad3 	bl	80008a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000302:	2301      	movs	r3, #1
 8000304:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000306:	f44f 7380 	mov.w	r3, #256	; 0x100
 800030a:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800030c:	1d3b      	adds	r3, r7, #4
 800030e:	4618      	mov	r0, r3
 8000310:	f001 fcc4 	bl	8001c9c <HAL_RCCEx_PeriphCLKConfig>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800031a:	f000 fac5 	bl	80008a8 <Error_Handler>
  }
}
 800031e:	bf00      	nop
 8000320:	3750      	adds	r7, #80	; 0x50
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
	...

08000328 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800032c:	4b12      	ldr	r3, [pc, #72]	; (8000378 <MX_I2C2_Init+0x50>)
 800032e:	4a13      	ldr	r2, [pc, #76]	; (800037c <MX_I2C2_Init+0x54>)
 8000330:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000332:	4b11      	ldr	r3, [pc, #68]	; (8000378 <MX_I2C2_Init+0x50>)
 8000334:	4a12      	ldr	r2, [pc, #72]	; (8000380 <MX_I2C2_Init+0x58>)
 8000336:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000338:	4b0f      	ldr	r3, [pc, #60]	; (8000378 <MX_I2C2_Init+0x50>)
 800033a:	2200      	movs	r2, #0
 800033c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800033e:	4b0e      	ldr	r3, [pc, #56]	; (8000378 <MX_I2C2_Init+0x50>)
 8000340:	2200      	movs	r2, #0
 8000342:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000344:	4b0c      	ldr	r3, [pc, #48]	; (8000378 <MX_I2C2_Init+0x50>)
 8000346:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800034a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800034c:	4b0a      	ldr	r3, [pc, #40]	; (8000378 <MX_I2C2_Init+0x50>)
 800034e:	2200      	movs	r2, #0
 8000350:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000352:	4b09      	ldr	r3, [pc, #36]	; (8000378 <MX_I2C2_Init+0x50>)
 8000354:	2200      	movs	r2, #0
 8000356:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000358:	4b07      	ldr	r3, [pc, #28]	; (8000378 <MX_I2C2_Init+0x50>)
 800035a:	2200      	movs	r2, #0
 800035c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800035e:	4b06      	ldr	r3, [pc, #24]	; (8000378 <MX_I2C2_Init+0x50>)
 8000360:	2200      	movs	r2, #0
 8000362:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000364:	4804      	ldr	r0, [pc, #16]	; (8000378 <MX_I2C2_Init+0x50>)
 8000366:	f000 ff25 	bl	80011b4 <HAL_I2C_Init>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000370:	f000 fa9a 	bl	80008a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000374:	bf00      	nop
 8000376:	bd80      	pop	{r7, pc}
 8000378:	20000084 	.word	0x20000084
 800037c:	40005800 	.word	0x40005800
 8000380:	000186a0 	.word	0x000186a0

08000384 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000388:	4b17      	ldr	r3, [pc, #92]	; (80003e8 <MX_SPI1_Init+0x64>)
 800038a:	4a18      	ldr	r2, [pc, #96]	; (80003ec <MX_SPI1_Init+0x68>)
 800038c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800038e:	4b16      	ldr	r3, [pc, #88]	; (80003e8 <MX_SPI1_Init+0x64>)
 8000390:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000394:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000396:	4b14      	ldr	r3, [pc, #80]	; (80003e8 <MX_SPI1_Init+0x64>)
 8000398:	2200      	movs	r2, #0
 800039a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800039c:	4b12      	ldr	r3, [pc, #72]	; (80003e8 <MX_SPI1_Init+0x64>)
 800039e:	2200      	movs	r2, #0
 80003a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003a2:	4b11      	ldr	r3, [pc, #68]	; (80003e8 <MX_SPI1_Init+0x64>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003a8:	4b0f      	ldr	r3, [pc, #60]	; (80003e8 <MX_SPI1_Init+0x64>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003ae:	4b0e      	ldr	r3, [pc, #56]	; (80003e8 <MX_SPI1_Init+0x64>)
 80003b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80003b6:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <MX_SPI1_Init+0x64>)
 80003b8:	2210      	movs	r2, #16
 80003ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003bc:	4b0a      	ldr	r3, [pc, #40]	; (80003e8 <MX_SPI1_Init+0x64>)
 80003be:	2200      	movs	r2, #0
 80003c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003c2:	4b09      	ldr	r3, [pc, #36]	; (80003e8 <MX_SPI1_Init+0x64>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003c8:	4b07      	ldr	r3, [pc, #28]	; (80003e8 <MX_SPI1_Init+0x64>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80003ce:	4b06      	ldr	r3, [pc, #24]	; (80003e8 <MX_SPI1_Init+0x64>)
 80003d0:	220a      	movs	r2, #10
 80003d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003d4:	4804      	ldr	r0, [pc, #16]	; (80003e8 <MX_SPI1_Init+0x64>)
 80003d6:	f001 fd17 	bl	8001e08 <HAL_SPI_Init>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80003e0:	f000 fa62 	bl	80008a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003e4:	bf00      	nop
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	200000d8 	.word	0x200000d8
 80003ec:	40013000 	.word	0x40013000

080003f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b088      	sub	sp, #32
 80003f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f6:	f107 0310 	add.w	r3, r7, #16
 80003fa:	2200      	movs	r2, #0
 80003fc:	601a      	str	r2, [r3, #0]
 80003fe:	605a      	str	r2, [r3, #4]
 8000400:	609a      	str	r2, [r3, #8]
 8000402:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000404:	4b1f      	ldr	r3, [pc, #124]	; (8000484 <MX_GPIO_Init+0x94>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	4a1e      	ldr	r2, [pc, #120]	; (8000484 <MX_GPIO_Init+0x94>)
 800040a:	f043 0310 	orr.w	r3, r3, #16
 800040e:	6193      	str	r3, [r2, #24]
 8000410:	4b1c      	ldr	r3, [pc, #112]	; (8000484 <MX_GPIO_Init+0x94>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	f003 0310 	and.w	r3, r3, #16
 8000418:	60fb      	str	r3, [r7, #12]
 800041a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800041c:	4b19      	ldr	r3, [pc, #100]	; (8000484 <MX_GPIO_Init+0x94>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	4a18      	ldr	r2, [pc, #96]	; (8000484 <MX_GPIO_Init+0x94>)
 8000422:	f043 0320 	orr.w	r3, r3, #32
 8000426:	6193      	str	r3, [r2, #24]
 8000428:	4b16      	ldr	r3, [pc, #88]	; (8000484 <MX_GPIO_Init+0x94>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	f003 0320 	and.w	r3, r3, #32
 8000430:	60bb      	str	r3, [r7, #8]
 8000432:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000434:	4b13      	ldr	r3, [pc, #76]	; (8000484 <MX_GPIO_Init+0x94>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	4a12      	ldr	r2, [pc, #72]	; (8000484 <MX_GPIO_Init+0x94>)
 800043a:	f043 0304 	orr.w	r3, r3, #4
 800043e:	6193      	str	r3, [r2, #24]
 8000440:	4b10      	ldr	r3, [pc, #64]	; (8000484 <MX_GPIO_Init+0x94>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	f003 0304 	and.w	r3, r3, #4
 8000448:	607b      	str	r3, [r7, #4]
 800044a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800044c:	4b0d      	ldr	r3, [pc, #52]	; (8000484 <MX_GPIO_Init+0x94>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	4a0c      	ldr	r2, [pc, #48]	; (8000484 <MX_GPIO_Init+0x94>)
 8000452:	f043 0308 	orr.w	r3, r3, #8
 8000456:	6193      	str	r3, [r2, #24]
 8000458:	4b0a      	ldr	r3, [pc, #40]	; (8000484 <MX_GPIO_Init+0x94>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	f003 0308 	and.w	r3, r3, #8
 8000460:	603b      	str	r3, [r7, #0]
 8000462:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000464:	2301      	movs	r3, #1
 8000466:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000468:	2300      	movs	r3, #0
 800046a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800046c:	2302      	movs	r3, #2
 800046e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000470:	f107 0310 	add.w	r3, r7, #16
 8000474:	4619      	mov	r1, r3
 8000476:	4804      	ldr	r0, [pc, #16]	; (8000488 <MX_GPIO_Init+0x98>)
 8000478:	f000 fd18 	bl	8000eac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800047c:	bf00      	nop
 800047e:	3720      	adds	r7, #32
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	40021000 	.word	0x40021000
 8000488:	40010800 	.word	0x40010800

0800048c <PinInit>:

/* USER CODE BEGIN 4 */

void PinInit() {
 800048c:	b580      	push	{r7, lr}
 800048e:	b084      	sub	sp, #16
 8000490:	af00      	add	r7, sp, #0
	for (uint8_t i = 4; i<= 7; i++) {
 8000492:	2304      	movs	r3, #4
 8000494:	73fb      	strb	r3, [r7, #15]
 8000496:	e021      	b.n	80004dc <PinInit+0x50>
		GPIOB->CRL = (GPIOB->CRL&~(0b11<<(i*4+2)))|(0<<(4*i+2)); //DescriptMode
 8000498:	4b40      	ldr	r3, [pc, #256]	; (800059c <PinInit+0x110>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	7bfa      	ldrb	r2, [r7, #15]
 800049e:	0092      	lsls	r2, r2, #2
 80004a0:	3202      	adds	r2, #2
 80004a2:	2103      	movs	r1, #3
 80004a4:	fa01 f202 	lsl.w	r2, r1, r2
 80004a8:	43d2      	mvns	r2, r2
 80004aa:	4611      	mov	r1, r2
 80004ac:	4a3b      	ldr	r2, [pc, #236]	; (800059c <PinInit+0x110>)
 80004ae:	400b      	ands	r3, r1
 80004b0:	6013      	str	r3, [r2, #0]
		GPIOB->CRL = (GPIOB->CRL&~(0b11<<(i*4)))|(1<<(4*i)); //MODE
 80004b2:	4b3a      	ldr	r3, [pc, #232]	; (800059c <PinInit+0x110>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	7bfa      	ldrb	r2, [r7, #15]
 80004b8:	0092      	lsls	r2, r2, #2
 80004ba:	2103      	movs	r1, #3
 80004bc:	fa01 f202 	lsl.w	r2, r1, r2
 80004c0:	43d2      	mvns	r2, r2
 80004c2:	4013      	ands	r3, r2
 80004c4:	7bfa      	ldrb	r2, [r7, #15]
 80004c6:	0092      	lsls	r2, r2, #2
 80004c8:	2101      	movs	r1, #1
 80004ca:	fa01 f202 	lsl.w	r2, r1, r2
 80004ce:	4611      	mov	r1, r2
 80004d0:	4a32      	ldr	r2, [pc, #200]	; (800059c <PinInit+0x110>)
 80004d2:	430b      	orrs	r3, r1
 80004d4:	6013      	str	r3, [r2, #0]
	for (uint8_t i = 4; i<= 7; i++) {
 80004d6:	7bfb      	ldrb	r3, [r7, #15]
 80004d8:	3301      	adds	r3, #1
 80004da:	73fb      	strb	r3, [r7, #15]
 80004dc:	7bfb      	ldrb	r3, [r7, #15]
 80004de:	2b07      	cmp	r3, #7
 80004e0:	d9da      	bls.n	8000498 <PinInit+0xc>
	}
	for (uint8_t i = 8 ; i<=9; i++) {
 80004e2:	2308      	movs	r3, #8
 80004e4:	73bb      	strb	r3, [r7, #14]
 80004e6:	e024      	b.n	8000532 <PinInit+0xa6>
		uint8_t position = i - 7;
 80004e8:	7bbb      	ldrb	r3, [r7, #14]
 80004ea:	3b07      	subs	r3, #7
 80004ec:	71fb      	strb	r3, [r7, #7]
		GPIOB->CRH = (GPIOB->CRH&~(0b11<<(position*4+2)))|(0b0<<(4*position+2));
 80004ee:	4b2b      	ldr	r3, [pc, #172]	; (800059c <PinInit+0x110>)
 80004f0:	685b      	ldr	r3, [r3, #4]
 80004f2:	79fa      	ldrb	r2, [r7, #7]
 80004f4:	0092      	lsls	r2, r2, #2
 80004f6:	3202      	adds	r2, #2
 80004f8:	2103      	movs	r1, #3
 80004fa:	fa01 f202 	lsl.w	r2, r1, r2
 80004fe:	43d2      	mvns	r2, r2
 8000500:	4611      	mov	r1, r2
 8000502:	4a26      	ldr	r2, [pc, #152]	; (800059c <PinInit+0x110>)
 8000504:	400b      	ands	r3, r1
 8000506:	6053      	str	r3, [r2, #4]
		GPIOB->CRH = (GPIOB->CRH&~(0b11<<(position*4)))|(0b01<<4*position);
 8000508:	4b24      	ldr	r3, [pc, #144]	; (800059c <PinInit+0x110>)
 800050a:	685b      	ldr	r3, [r3, #4]
 800050c:	79fa      	ldrb	r2, [r7, #7]
 800050e:	0092      	lsls	r2, r2, #2
 8000510:	2103      	movs	r1, #3
 8000512:	fa01 f202 	lsl.w	r2, r1, r2
 8000516:	43d2      	mvns	r2, r2
 8000518:	4013      	ands	r3, r2
 800051a:	79fa      	ldrb	r2, [r7, #7]
 800051c:	0092      	lsls	r2, r2, #2
 800051e:	2101      	movs	r1, #1
 8000520:	fa01 f202 	lsl.w	r2, r1, r2
 8000524:	4611      	mov	r1, r2
 8000526:	4a1d      	ldr	r2, [pc, #116]	; (800059c <PinInit+0x110>)
 8000528:	430b      	orrs	r3, r1
 800052a:	6053      	str	r3, [r2, #4]
	for (uint8_t i = 8 ; i<=9; i++) {
 800052c:	7bbb      	ldrb	r3, [r7, #14]
 800052e:	3301      	adds	r3, #1
 8000530:	73bb      	strb	r3, [r7, #14]
 8000532:	7bbb      	ldrb	r3, [r7, #14]
 8000534:	2b09      	cmp	r3, #9
 8000536:	d9d7      	bls.n	80004e8 <PinInit+0x5c>
	}
	for (uint8_t i = 4; i<= 9; i++) {
 8000538:	2304      	movs	r3, #4
 800053a:	737b      	strb	r3, [r7, #13]
 800053c:	e019      	b.n	8000572 <PinInit+0xe6>
		GPIOB->BSRR = (GPIOB->BSRR &~(0b1<<i))|(0b0<<i);
 800053e:	4b17      	ldr	r3, [pc, #92]	; (800059c <PinInit+0x110>)
 8000540:	691b      	ldr	r3, [r3, #16]
 8000542:	7b7a      	ldrb	r2, [r7, #13]
 8000544:	2101      	movs	r1, #1
 8000546:	fa01 f202 	lsl.w	r2, r1, r2
 800054a:	43d2      	mvns	r2, r2
 800054c:	4611      	mov	r1, r2
 800054e:	4a13      	ldr	r2, [pc, #76]	; (800059c <PinInit+0x110>)
 8000550:	400b      	ands	r3, r1
 8000552:	6113      	str	r3, [r2, #16]
		GPIOB->BSRR = (GPIOB->BSRR &~(0b1<<(i+16)))|(0b0<<(i+16));
 8000554:	4b11      	ldr	r3, [pc, #68]	; (800059c <PinInit+0x110>)
 8000556:	691b      	ldr	r3, [r3, #16]
 8000558:	7b7a      	ldrb	r2, [r7, #13]
 800055a:	3210      	adds	r2, #16
 800055c:	2101      	movs	r1, #1
 800055e:	fa01 f202 	lsl.w	r2, r1, r2
 8000562:	43d2      	mvns	r2, r2
 8000564:	4611      	mov	r1, r2
 8000566:	4a0d      	ldr	r2, [pc, #52]	; (800059c <PinInit+0x110>)
 8000568:	400b      	ands	r3, r1
 800056a:	6113      	str	r3, [r2, #16]
	for (uint8_t i = 4; i<= 9; i++) {
 800056c:	7b7b      	ldrb	r3, [r7, #13]
 800056e:	3301      	adds	r3, #1
 8000570:	737b      	strb	r3, [r7, #13]
 8000572:	7b7b      	ldrb	r3, [r7, #13]
 8000574:	2b09      	cmp	r3, #9
 8000576:	d9e2      	bls.n	800053e <PinInit+0xb2>
	}
	int temp = GPIOB->CRL;
 8000578:	4b08      	ldr	r3, [pc, #32]	; (800059c <PinInit+0x110>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	60bb      	str	r3, [r7, #8]
	printf("%d /n", temp);
 800057e:	68b9      	ldr	r1, [r7, #8]
 8000580:	4807      	ldr	r0, [pc, #28]	; (80005a0 <PinInit+0x114>)
 8000582:	f001 fd75 	bl	8002070 <iprintf>
	temp = GPIOB->CRH;
 8000586:	4b05      	ldr	r3, [pc, #20]	; (800059c <PinInit+0x110>)
 8000588:	685b      	ldr	r3, [r3, #4]
 800058a:	60bb      	str	r3, [r7, #8]
	printf("%d /n", temp);
 800058c:	68b9      	ldr	r1, [r7, #8]
 800058e:	4804      	ldr	r0, [pc, #16]	; (80005a0 <PinInit+0x114>)
 8000590:	f001 fd6e 	bl	8002070 <iprintf>
}
 8000594:	bf00      	nop
 8000596:	3710      	adds	r7, #16
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	40010c00 	.word	0x40010c00
 80005a0:	08002eb8 	.word	0x08002eb8

080005a4 <MuaLed>:

void MuaLed() {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0

	for (uint8_t i=4; i<=9; i++) GPIOB->BSRR = (GPIOB->BSRR&~(0b1<<(i+16)))|(1<<(i+16));
 80005aa:	2304      	movs	r3, #4
 80005ac:	71fb      	strb	r3, [r7, #7]
 80005ae:	e014      	b.n	80005da <MuaLed+0x36>
 80005b0:	4b2a      	ldr	r3, [pc, #168]	; (800065c <MuaLed+0xb8>)
 80005b2:	691b      	ldr	r3, [r3, #16]
 80005b4:	79fa      	ldrb	r2, [r7, #7]
 80005b6:	3210      	adds	r2, #16
 80005b8:	2101      	movs	r1, #1
 80005ba:	fa01 f202 	lsl.w	r2, r1, r2
 80005be:	43d2      	mvns	r2, r2
 80005c0:	4013      	ands	r3, r2
 80005c2:	79fa      	ldrb	r2, [r7, #7]
 80005c4:	3210      	adds	r2, #16
 80005c6:	2101      	movs	r1, #1
 80005c8:	fa01 f202 	lsl.w	r2, r1, r2
 80005cc:	4611      	mov	r1, r2
 80005ce:	4a23      	ldr	r2, [pc, #140]	; (800065c <MuaLed+0xb8>)
 80005d0:	430b      	orrs	r3, r1
 80005d2:	6113      	str	r3, [r2, #16]
 80005d4:	79fb      	ldrb	r3, [r7, #7]
 80005d6:	3301      	adds	r3, #1
 80005d8:	71fb      	strb	r3, [r7, #7]
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	2b09      	cmp	r3, #9
 80005de:	d9e7      	bls.n	80005b0 <MuaLed+0xc>
	for (uint8_t i= 4; i<= 9; i++) {
 80005e0:	2304      	movs	r3, #4
 80005e2:	71bb      	strb	r3, [r7, #6]
 80005e4:	e032      	b.n	800064c <MuaLed+0xa8>
		GPIOB->BSRR = (GPIOB->BSRR&~(0b1<<(i)))|(1<<(i));
 80005e6:	4b1d      	ldr	r3, [pc, #116]	; (800065c <MuaLed+0xb8>)
 80005e8:	691b      	ldr	r3, [r3, #16]
 80005ea:	79ba      	ldrb	r2, [r7, #6]
 80005ec:	2101      	movs	r1, #1
 80005ee:	fa01 f202 	lsl.w	r2, r1, r2
 80005f2:	43d2      	mvns	r2, r2
 80005f4:	4013      	ands	r3, r2
 80005f6:	79ba      	ldrb	r2, [r7, #6]
 80005f8:	2101      	movs	r1, #1
 80005fa:	fa01 f202 	lsl.w	r2, r1, r2
 80005fe:	4611      	mov	r1, r2
 8000600:	4a16      	ldr	r2, [pc, #88]	; (800065c <MuaLed+0xb8>)
 8000602:	430b      	orrs	r3, r1
 8000604:	6113      	str	r3, [r2, #16]
		HAL_Delay(100);
 8000606:	2064      	movs	r0, #100	; 0x64
 8000608:	f000 fb48 	bl	8000c9c <HAL_Delay>
		GPIOB->BSRR = (GPIOB->BSRR&~(0b1<<(i)))|(0<<(i));
 800060c:	4b13      	ldr	r3, [pc, #76]	; (800065c <MuaLed+0xb8>)
 800060e:	691b      	ldr	r3, [r3, #16]
 8000610:	79ba      	ldrb	r2, [r7, #6]
 8000612:	2101      	movs	r1, #1
 8000614:	fa01 f202 	lsl.w	r2, r1, r2
 8000618:	43d2      	mvns	r2, r2
 800061a:	4611      	mov	r1, r2
 800061c:	4a0f      	ldr	r2, [pc, #60]	; (800065c <MuaLed+0xb8>)
 800061e:	400b      	ands	r3, r1
 8000620:	6113      	str	r3, [r2, #16]
		GPIOB->BSRR = (GPIOB->BSRR&~(0b1<<(i+16)))|(1<<(i+16));
 8000622:	4b0e      	ldr	r3, [pc, #56]	; (800065c <MuaLed+0xb8>)
 8000624:	691b      	ldr	r3, [r3, #16]
 8000626:	79ba      	ldrb	r2, [r7, #6]
 8000628:	3210      	adds	r2, #16
 800062a:	2101      	movs	r1, #1
 800062c:	fa01 f202 	lsl.w	r2, r1, r2
 8000630:	43d2      	mvns	r2, r2
 8000632:	4013      	ands	r3, r2
 8000634:	79ba      	ldrb	r2, [r7, #6]
 8000636:	3210      	adds	r2, #16
 8000638:	2101      	movs	r1, #1
 800063a:	fa01 f202 	lsl.w	r2, r1, r2
 800063e:	4611      	mov	r1, r2
 8000640:	4a06      	ldr	r2, [pc, #24]	; (800065c <MuaLed+0xb8>)
 8000642:	430b      	orrs	r3, r1
 8000644:	6113      	str	r3, [r2, #16]
	for (uint8_t i= 4; i<= 9; i++) {
 8000646:	79bb      	ldrb	r3, [r7, #6]
 8000648:	3301      	adds	r3, #1
 800064a:	71bb      	strb	r3, [r7, #6]
 800064c:	79bb      	ldrb	r3, [r7, #6]
 800064e:	2b09      	cmp	r3, #9
 8000650:	d9c9      	bls.n	80005e6 <MuaLed+0x42>
	}
}
 8000652:	bf00      	nop
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40010c00 	.word	0x40010c00

08000660 <EnterStandBy>:

void EnterStandBy() {
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
	printf("Entering StandBy");
 8000664:	4805      	ldr	r0, [pc, #20]	; (800067c <EnterStandBy+0x1c>)
 8000666:	f001 fd03 	bl	8002070 <iprintf>
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 800066a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800066e:	f000 fee5 	bl	800143c <HAL_PWR_EnableWakeUpPin>
	HAL_PWR_EnterSTANDBYMode();
 8000672:	f000 feff 	bl	8001474 <HAL_PWR_EnterSTANDBYMode>
}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	08002ec0 	.word	0x08002ec0

08000680 <RTC_Init>:
	HAL_RTC_SetAlarm(&hrtc, &a, RTC_FORMAT_BIN);
}



void RTC_Init(){
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
	/** @note */
	/* PWREN: Power interface clock enable
	 * Set and cleared by software.
	 * 0: Power interface clock disabled
	 * 1: Power interface clock enabl*/
	SET_BIT(RCC->APB1ENR, RCC_APB1ENR_PWREN);
 8000686:	4b25      	ldr	r3, [pc, #148]	; (800071c <RTC_Init+0x9c>)
 8000688:	69db      	ldr	r3, [r3, #28]
 800068a:	4a24      	ldr	r2, [pc, #144]	; (800071c <RTC_Init+0x9c>)
 800068c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000690:	61d3      	str	r3, [r2, #28]
	/* BKPEN: Backup interface clock enable
	 * Set and cleared by software.
	 * 0: Backup interface clock disabled
	 * 1: Backup interface clock enabled*/
	SET_BIT(RCC->APB1ENR, RCC_APB1ENR_BKPEN);
 8000692:	4b22      	ldr	r3, [pc, #136]	; (800071c <RTC_Init+0x9c>)
 8000694:	69db      	ldr	r3, [r3, #28]
 8000696:	4a21      	ldr	r2, [pc, #132]	; (800071c <RTC_Init+0x9c>)
 8000698:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800069c:	61d3      	str	r3, [r2, #28]
	 * In reset state, the RTC and backup registers are protected against parasitic write access.
	 * This bit must be set to enable write access to these registers.
	 * 0: Access to RTC and Backup registers disabled
	 * 1: Access to RTC and Backup registers enabled
	 * Note: If the HSE divided by 128 is used as the RTC clock, this bit must remain set to 1.*/
	SET_BIT(PWR->CR, PWR_CR_DBP);
 800069e:	4b20      	ldr	r3, [pc, #128]	; (8000720 <RTC_Init+0xa0>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4a1f      	ldr	r2, [pc, #124]	; (8000720 <RTC_Init+0xa0>)
 80006a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006a8:	6013      	str	r3, [r2, #0]
	/*RTCEN: RTC clock enable
	 * Set and cleared by software.
	 * 0: RTC clock disabled
	 * 1: RTC clock enabled
	 * */
	printf("CHEKC POINT -1: %d\n", READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY));
 80006aa:	4b1c      	ldr	r3, [pc, #112]	; (800071c <RTC_Init+0x9c>)
 80006ac:	6a1b      	ldr	r3, [r3, #32]
 80006ae:	f003 0302 	and.w	r3, r3, #2
 80006b2:	4619      	mov	r1, r3
 80006b4:	481b      	ldr	r0, [pc, #108]	; (8000724 <RTC_Init+0xa4>)
 80006b6:	f001 fcdb 	bl	8002070 <iprintf>
	SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80006ba:	4b18      	ldr	r3, [pc, #96]	; (800071c <RTC_Init+0x9c>)
 80006bc:	6a1b      	ldr	r3, [r3, #32]
 80006be:	4a17      	ldr	r2, [pc, #92]	; (800071c <RTC_Init+0x9c>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6213      	str	r3, [r2, #32]
	 * Set and cleared by hardware to indicate when the external 32 kHz oscillator is stable. After
	 * the LSEON bit is cleared, LSERDY goes low after 6 external low-speed oscillator clock cycles.
	 * 0: External 32 kHz oscillator not ready
	 * 1: External 32 kHz oscillator ready*/
//	printf("BIT %d: \n", RCC_BDCR_LSEBYP);
	uint8_t count = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	71fb      	strb	r3, [r7, #7]

	while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY)==0) {
 80006ca:	e009      	b.n	80006e0 <RTC_Init+0x60>
		count++;
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	3301      	adds	r3, #1
 80006d0:	71fb      	strb	r3, [r7, #7]
		if (count>100) {
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	2b64      	cmp	r3, #100	; 0x64
 80006d6:	d903      	bls.n	80006e0 <RTC_Init+0x60>
			printf("Have a problem for connecting the External Crystal Clock!");
 80006d8:	4813      	ldr	r0, [pc, #76]	; (8000728 <RTC_Init+0xa8>)
 80006da:	f001 fcc9 	bl	8002070 <iprintf>
			break;
 80006de:	e005      	b.n	80006ec <RTC_Init+0x6c>
	while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY)==0) {
 80006e0:	4b0e      	ldr	r3, [pc, #56]	; (800071c <RTC_Init+0x9c>)
 80006e2:	6a1b      	ldr	r3, [r3, #32]
 80006e4:	f003 0302 	and.w	r3, r3, #2
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d0ef      	beq.n	80006cc <RTC_Init+0x4c>
		} else;
	}
//	printf("BDCR: %d\n", RCC->BDCR);

	SET_BIT(RCC->BDCR, 9);
 80006ec:	4b0b      	ldr	r3, [pc, #44]	; (800071c <RTC_Init+0x9c>)
 80006ee:	6a1b      	ldr	r3, [r3, #32]
 80006f0:	4a0a      	ldr	r2, [pc, #40]	; (800071c <RTC_Init+0x9c>)
 80006f2:	f043 0309 	orr.w	r3, r3, #9
 80006f6:	6213      	str	r3, [r2, #32]

	SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80006f8:	4b08      	ldr	r3, [pc, #32]	; (800071c <RTC_Init+0x9c>)
 80006fa:	6a1b      	ldr	r3, [r3, #32]
 80006fc:	4a07      	ldr	r2, [pc, #28]	; (800071c <RTC_Init+0x9c>)
 80006fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000702:	6213      	str	r3, [r2, #32]
	printf("CHEKC POINT -1: %d\n", RCC->BDCR);
 8000704:	4b05      	ldr	r3, [pc, #20]	; (800071c <RTC_Init+0x9c>)
 8000706:	6a1b      	ldr	r3, [r3, #32]
 8000708:	4619      	mov	r1, r3
 800070a:	4806      	ldr	r0, [pc, #24]	; (8000724 <RTC_Init+0xa4>)
 800070c:	f001 fcb0 	bl	8002070 <iprintf>
	/* Bit 0 LSEON: External low-speed oscillator enable (Low speed external)
	 * Set and cleared by software.
	 * 0: External 32 kHz oscillator OFF
	 * 1: External 32 kHz oscillator ON*/

	KIET_configure_rtc_register();
 8000710:	f000 f80c 	bl	800072c <KIET_configure_rtc_register>
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40021000 	.word	0x40021000
 8000720:	40007000 	.word	0x40007000
 8000724:	08002ed4 	.word	0x08002ed4
 8000728:	08002ee8 	.word	0x08002ee8

0800072c <KIET_configure_rtc_register>:



void KIET_configure_rtc_register() {
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
	/* 1. Poll RTOFF, wait until its value goes to ‘1
	 * 2. Set the CNF bit to enter configuration mode
	 * 3. Write to one or more RTC registers
	 * 4. Clear the CNF bit to exit configuration mode
	 * 5. Poll RTOFF, wait until its value goes to ‘1’ to check the end of the write operation*/
	printf("CHEKC POINT 0: %d\n", READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY)); //OKEE ==> VẤn đ�? ở CLOK chưa được kết nối vào
 8000730:	4b38      	ldr	r3, [pc, #224]	; (8000814 <KIET_configure_rtc_register+0xe8>)
 8000732:	6a1b      	ldr	r3, [r3, #32]
 8000734:	f003 0302 	and.w	r3, r3, #2
 8000738:	4619      	mov	r1, r3
 800073a:	4837      	ldr	r0, [pc, #220]	; (8000818 <KIET_configure_rtc_register+0xec>)
 800073c:	f001 fc98 	bl	8002070 <iprintf>
	while (READ_BIT(RTC->CRL, RTC_CRL_RTOFF)==0) {printf("HAL_L1_Check RTOFF\n");}
 8000740:	e002      	b.n	8000748 <KIET_configure_rtc_register+0x1c>
 8000742:	4836      	ldr	r0, [pc, #216]	; (800081c <KIET_configure_rtc_register+0xf0>)
 8000744:	f001 fcfa 	bl	800213c <puts>
 8000748:	4b35      	ldr	r3, [pc, #212]	; (8000820 <KIET_configure_rtc_register+0xf4>)
 800074a:	685b      	ldr	r3, [r3, #4]
 800074c:	f003 0320 	and.w	r3, r3, #32
 8000750:	2b00      	cmp	r3, #0
 8000752:	d0f6      	beq.n	8000742 <KIET_configure_rtc_register+0x16>
	 * This bit must be set by software to enter in configuration mode so as to allow new values to
	 * be written in the RTC_CNT, RTC_ALR or RTC_PRL registers. The write operation is only
	 * executed when the CNF bit is reset by software after has been set.
	 * 0: Exit configuration mode (start update of RTC registers).
	 * 1: Enter configuration mode.*/
	SET_BIT(RTC->CRL, RTC_CRL_CNF);
 8000754:	4b32      	ldr	r3, [pc, #200]	; (8000820 <KIET_configure_rtc_register+0xf4>)
 8000756:	685b      	ldr	r3, [r3, #4]
 8000758:	4a31      	ldr	r2, [pc, #196]	; (8000820 <KIET_configure_rtc_register+0xf4>)
 800075a:	f043 0310 	orr.w	r3, r3, #16
 800075e:	6053      	str	r3, [r2, #4]
	printf("CHEKC POINT 1: %d\n", READ_BIT(RTC->CRL, RTC_CRL_RTOFF));
 8000760:	4b2f      	ldr	r3, [pc, #188]	; (8000820 <KIET_configure_rtc_register+0xf4>)
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	f003 0320 	and.w	r3, r3, #32
 8000768:	4619      	mov	r1, r3
 800076a:	482e      	ldr	r0, [pc, #184]	; (8000824 <KIET_configure_rtc_register+0xf8>)
 800076c:	f001 fc80 	bl	8002070 <iprintf>
	/*Begin for writing to RTC Register - Write one or more RTC register*/
	RTC->PRLH = 0U;
 8000770:	4b2b      	ldr	r3, [pc, #172]	; (8000820 <KIET_configure_rtc_register+0xf4>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
	RTC->PRLL = 0x7FFFU;
 8000776:	4b2a      	ldr	r3, [pc, #168]	; (8000820 <KIET_configure_rtc_register+0xf4>)
 8000778:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800077c:	60da      	str	r2, [r3, #12]
	printf("CHEKC POINT 2: %d\n", READ_BIT(RTC->CRL, RTC_CRL_RTOFF));
 800077e:	4b28      	ldr	r3, [pc, #160]	; (8000820 <KIET_configure_rtc_register+0xf4>)
 8000780:	685b      	ldr	r3, [r3, #4]
 8000782:	f003 0320 	and.w	r3, r3, #32
 8000786:	4619      	mov	r1, r3
 8000788:	4827      	ldr	r0, [pc, #156]	; (8000828 <KIET_configure_rtc_register+0xfc>)
 800078a:	f001 fc71 	bl	8002070 <iprintf>
//	RTC->DIVH = 0x0000U;
//	RTC->DIVL = 0x8000U;
	printf("CHEKC POINT 3: %d\n", READ_BIT(RTC->CRL, RTC_CRL_RTOFF));
 800078e:	4b24      	ldr	r3, [pc, #144]	; (8000820 <KIET_configure_rtc_register+0xf4>)
 8000790:	685b      	ldr	r3, [r3, #4]
 8000792:	f003 0320 	and.w	r3, r3, #32
 8000796:	4619      	mov	r1, r3
 8000798:	4824      	ldr	r0, [pc, #144]	; (800082c <KIET_configure_rtc_register+0x100>)
 800079a:	f001 fc69 	bl	8002070 <iprintf>
	RTC->CNTH = 0x0000U;
 800079e:	4b20      	ldr	r3, [pc, #128]	; (8000820 <KIET_configure_rtc_register+0xf4>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
	RTC->CNTL = 0x0000U;
 80007a4:	4b1e      	ldr	r3, [pc, #120]	; (8000820 <KIET_configure_rtc_register+0xf4>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]

	RTC->ALRH = 0x0000U;
 80007aa:	4b1d      	ldr	r3, [pc, #116]	; (8000820 <KIET_configure_rtc_register+0xf4>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	621a      	str	r2, [r3, #32]
	RTC->ALRL = 0x0004U;
 80007b0:	4b1b      	ldr	r3, [pc, #108]	; (8000820 <KIET_configure_rtc_register+0xf4>)
 80007b2:	2204      	movs	r2, #4
 80007b4:	625a      	str	r2, [r3, #36]	; 0x24
	SET_BIT(RTC->CRH, RTC_CRH_ALRIE);
 80007b6:	4b1a      	ldr	r3, [pc, #104]	; (8000820 <KIET_configure_rtc_register+0xf4>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4a19      	ldr	r2, [pc, #100]	; (8000820 <KIET_configure_rtc_register+0xf4>)
 80007bc:	f043 0302 	orr.w	r3, r3, #2
 80007c0:	6013      	str	r3, [r2, #0]
	SET_BIT(RTC->CRH, RTC_CRH_ALRIE);
 80007c2:	4b17      	ldr	r3, [pc, #92]	; (8000820 <KIET_configure_rtc_register+0xf4>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4a16      	ldr	r2, [pc, #88]	; (8000820 <KIET_configure_rtc_register+0xf4>)
 80007c8:	f043 0302 	orr.w	r3, r3, #2
 80007cc:	6013      	str	r3, [r2, #0]
	 * read the current value of the prescaler counter, stored in the RTC_DIV register, without
	 * stopping it. This register is read-only and it is reloaded by hardware after any change in the
	 * RTC_PRL or RTC_CNT registers.*/

	/*End of writing to RTC register*/
	CLEAR_BIT(RTC->CRL, RTC_CRL_CNF);
 80007ce:	4b14      	ldr	r3, [pc, #80]	; (8000820 <KIET_configure_rtc_register+0xf4>)
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	4a13      	ldr	r2, [pc, #76]	; (8000820 <KIET_configure_rtc_register+0xf4>)
 80007d4:	f023 0310 	bic.w	r3, r3, #16
 80007d8:	6053      	str	r3, [r2, #4]
	printf("CHEKC POINT 4: %d\n", READ_BIT(RTC->CRL, RTC_CRL_RTOFF));
 80007da:	4b11      	ldr	r3, [pc, #68]	; (8000820 <KIET_configure_rtc_register+0xf4>)
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	f003 0320 	and.w	r3, r3, #32
 80007e2:	4619      	mov	r1, r3
 80007e4:	4812      	ldr	r0, [pc, #72]	; (8000830 <KIET_configure_rtc_register+0x104>)
 80007e6:	f001 fc43 	bl	8002070 <iprintf>
	/* Bit 5 RTOFF: RTC operation OFF With this bit the RTC reports the status of the last write operation performed on its registers,
	 * indicating if it has been completed or not. If its value is ‘0’ then it is not possible to write to any
	 * of the RTC registers. This bit is read only.
	 * 0: Last write operation on RTC registers is still ongoing.
	 * 1: Last write operation on RTC registers terminated.*/
	while (READ_BIT(RTC->CRL, RTC_CRL_RTOFF)==0) {printf("HAL_L2_Ongoing in other command\n %d",READ_BIT(RTC->CRL, RTC_CRL_RTOFF) );}
 80007ea:	e007      	b.n	80007fc <KIET_configure_rtc_register+0xd0>
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <KIET_configure_rtc_register+0xf4>)
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	f003 0320 	and.w	r3, r3, #32
 80007f4:	4619      	mov	r1, r3
 80007f6:	480f      	ldr	r0, [pc, #60]	; (8000834 <KIET_configure_rtc_register+0x108>)
 80007f8:	f001 fc3a 	bl	8002070 <iprintf>
 80007fc:	4b08      	ldr	r3, [pc, #32]	; (8000820 <KIET_configure_rtc_register+0xf4>)
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	f003 0320 	and.w	r3, r3, #32
 8000804:	2b00      	cmp	r3, #0
 8000806:	d0f1      	beq.n	80007ec <KIET_configure_rtc_register+0xc0>
	printf("Done configuration RTC\n");
 8000808:	480b      	ldr	r0, [pc, #44]	; (8000838 <KIET_configure_rtc_register+0x10c>)
 800080a:	f001 fc97 	bl	800213c <puts>

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40021000 	.word	0x40021000
 8000818:	08002f24 	.word	0x08002f24
 800081c:	08002f38 	.word	0x08002f38
 8000820:	40002800 	.word	0x40002800
 8000824:	08002f4c 	.word	0x08002f4c
 8000828:	08002f60 	.word	0x08002f60
 800082c:	08002f74 	.word	0x08002f74
 8000830:	08002f88 	.word	0x08002f88
 8000834:	08002f9c 	.word	0x08002f9c
 8000838:	08002fc0 	.word	0x08002fc0

0800083c <revise>:


void revise() {
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
		/* 1. Poll RTOFF, wait until its value goes to ‘1
		 * 2. Set the CNF bit to enter configuration mode
		 * 3. Write to one or more RTC registers
		 * 4. Clear the CNF bit to exit configuration mode
		 * 5. Poll RTOFF, wait until its value goes to ‘1’ to check the end of the write operation*/
		while (READ_BIT(RTC->CRL, RTC_CRL_RTOFF)==0) {printf("HAL_L1_Check RTOFF\n");}
 8000840:	e002      	b.n	8000848 <revise+0xc>
 8000842:	4816      	ldr	r0, [pc, #88]	; (800089c <revise+0x60>)
 8000844:	f001 fc7a 	bl	800213c <puts>
 8000848:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <revise+0x64>)
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	f003 0320 	and.w	r3, r3, #32
 8000850:	2b00      	cmp	r3, #0
 8000852:	d0f6      	beq.n	8000842 <revise+0x6>
		 * This bit must be set by software to enter in configuration mode so as to allow new values to
		 * be written in the RTC_CNT, RTC_ALR or RTC_PRL registers. The write operation is only
		 * executed when the CNF bit is reset by software after has been set.
		 * 0: Exit configuration mode (start update of RTC registers).
		 * 1: Enter configuration mode.*/
		SET_BIT(RTC->CRL, RTC_CRL_CNF);
 8000854:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <revise+0x64>)
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	4a11      	ldr	r2, [pc, #68]	; (80008a0 <revise+0x64>)
 800085a:	f043 0310 	orr.w	r3, r3, #16
 800085e:	6053      	str	r3, [r2, #4]
		/*Begin for writing to RTC Register - Write one or more RTC register*/
	//	RTC->DIVH = 0x0000U;
	//	RTC->DIVL = 0x8000U;
		RTC->CNTH = 0x0000U;
 8000860:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <revise+0x64>)
 8000862:	2200      	movs	r2, #0
 8000864:	619a      	str	r2, [r3, #24]
		RTC->CNTL = 0x0000U;
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <revise+0x64>)
 8000868:	2200      	movs	r2, #0
 800086a:	61da      	str	r2, [r3, #28]
		 * read the current value of the prescaler counter, stored in the RTC_DIV register, without
		 * stopping it. This register is read-only and it is reloaded by hardware after any change in the
		 * RTC_PRL or RTC_CNT registers.*/

		/*End of writing to RTC register*/
		CLEAR_BIT(RTC->CRL, RTC_CRL_CNF);
 800086c:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <revise+0x64>)
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	4a0b      	ldr	r2, [pc, #44]	; (80008a0 <revise+0x64>)
 8000872:	f023 0310 	bic.w	r3, r3, #16
 8000876:	6053      	str	r3, [r2, #4]
		/* Bit 5 RTOFF: RTC operation OFF With this bit the RTC reports the status of the last write operation performed on its registers,
		 * indicating if it has been completed or not. If its value is ‘0’ then it is not possible to write to any
		 * of the RTC registers. This bit is read only.
		 * 0: Last write operation on RTC registers is still ongoing.
		 * 1: Last write operation on RTC registers terminated.*/
		while (READ_BIT(RTC->CRL, RTC_CRL_RTOFF)==0) {printf("HAL_L2_Ongoing in other command\n %d",READ_BIT(RTC->CRL, RTC_CRL_RTOFF) );}
 8000878:	e007      	b.n	800088a <revise+0x4e>
 800087a:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <revise+0x64>)
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	f003 0320 	and.w	r3, r3, #32
 8000882:	4619      	mov	r1, r3
 8000884:	4807      	ldr	r0, [pc, #28]	; (80008a4 <revise+0x68>)
 8000886:	f001 fbf3 	bl	8002070 <iprintf>
 800088a:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <revise+0x64>)
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	f003 0320 	and.w	r3, r3, #32
 8000892:	2b00      	cmp	r3, #0
 8000894:	d0f1      	beq.n	800087a <revise+0x3e>
}
 8000896:	bf00      	nop
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}
 800089c:	08002f38 	.word	0x08002f38
 80008a0:	40002800 	.word	0x40002800
 80008a4:	08002f9c 	.word	0x08002f9c

080008a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ac:	b672      	cpsid	i
}
 80008ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <Error_Handler+0x8>
	...

080008b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b085      	sub	sp, #20
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008ba:	4b15      	ldr	r3, [pc, #84]	; (8000910 <HAL_MspInit+0x5c>)
 80008bc:	699b      	ldr	r3, [r3, #24]
 80008be:	4a14      	ldr	r2, [pc, #80]	; (8000910 <HAL_MspInit+0x5c>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	6193      	str	r3, [r2, #24]
 80008c6:	4b12      	ldr	r3, [pc, #72]	; (8000910 <HAL_MspInit+0x5c>)
 80008c8:	699b      	ldr	r3, [r3, #24]
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d2:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <HAL_MspInit+0x5c>)
 80008d4:	69db      	ldr	r3, [r3, #28]
 80008d6:	4a0e      	ldr	r2, [pc, #56]	; (8000910 <HAL_MspInit+0x5c>)
 80008d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008dc:	61d3      	str	r3, [r2, #28]
 80008de:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <HAL_MspInit+0x5c>)
 80008e0:	69db      	ldr	r3, [r3, #28]
 80008e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008ea:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <HAL_MspInit+0x60>)
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	4a04      	ldr	r2, [pc, #16]	; (8000914 <HAL_MspInit+0x60>)
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000906:	bf00      	nop
 8000908:	3714      	adds	r7, #20
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr
 8000910:	40021000 	.word	0x40021000
 8000914:	40010000 	.word	0x40010000

08000918 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b088      	sub	sp, #32
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000920:	f107 0310 	add.w	r3, r7, #16
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a16      	ldr	r2, [pc, #88]	; (800098c <HAL_I2C_MspInit+0x74>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d124      	bne.n	8000982 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000938:	4b15      	ldr	r3, [pc, #84]	; (8000990 <HAL_I2C_MspInit+0x78>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	4a14      	ldr	r2, [pc, #80]	; (8000990 <HAL_I2C_MspInit+0x78>)
 800093e:	f043 0308 	orr.w	r3, r3, #8
 8000942:	6193      	str	r3, [r2, #24]
 8000944:	4b12      	ldr	r3, [pc, #72]	; (8000990 <HAL_I2C_MspInit+0x78>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	f003 0308 	and.w	r3, r3, #8
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000950:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000954:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000956:	2312      	movs	r3, #18
 8000958:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800095a:	2303      	movs	r3, #3
 800095c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800095e:	f107 0310 	add.w	r3, r7, #16
 8000962:	4619      	mov	r1, r3
 8000964:	480b      	ldr	r0, [pc, #44]	; (8000994 <HAL_I2C_MspInit+0x7c>)
 8000966:	f000 faa1 	bl	8000eac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800096a:	4b09      	ldr	r3, [pc, #36]	; (8000990 <HAL_I2C_MspInit+0x78>)
 800096c:	69db      	ldr	r3, [r3, #28]
 800096e:	4a08      	ldr	r2, [pc, #32]	; (8000990 <HAL_I2C_MspInit+0x78>)
 8000970:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000974:	61d3      	str	r3, [r2, #28]
 8000976:	4b06      	ldr	r3, [pc, #24]	; (8000990 <HAL_I2C_MspInit+0x78>)
 8000978:	69db      	ldr	r3, [r3, #28]
 800097a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000982:	bf00      	nop
 8000984:	3720      	adds	r7, #32
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40005800 	.word	0x40005800
 8000990:	40021000 	.word	0x40021000
 8000994:	40010c00 	.word	0x40010c00

08000998 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b088      	sub	sp, #32
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a0:	f107 0310 	add.w	r3, r7, #16
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a1b      	ldr	r2, [pc, #108]	; (8000a20 <HAL_SPI_MspInit+0x88>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d12f      	bne.n	8000a18 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009b8:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <HAL_SPI_MspInit+0x8c>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	4a19      	ldr	r2, [pc, #100]	; (8000a24 <HAL_SPI_MspInit+0x8c>)
 80009be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009c2:	6193      	str	r3, [r2, #24]
 80009c4:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <HAL_SPI_MspInit+0x8c>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d0:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <HAL_SPI_MspInit+0x8c>)
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	4a13      	ldr	r2, [pc, #76]	; (8000a24 <HAL_SPI_MspInit+0x8c>)
 80009d6:	f043 0304 	orr.w	r3, r3, #4
 80009da:	6193      	str	r3, [r2, #24]
 80009dc:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <HAL_SPI_MspInit+0x8c>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	f003 0304 	and.w	r3, r3, #4
 80009e4:	60bb      	str	r3, [r7, #8]
 80009e6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80009e8:	23a0      	movs	r3, #160	; 0xa0
 80009ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ec:	2302      	movs	r3, #2
 80009ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009f0:	2303      	movs	r3, #3
 80009f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f4:	f107 0310 	add.w	r3, r7, #16
 80009f8:	4619      	mov	r1, r3
 80009fa:	480b      	ldr	r0, [pc, #44]	; (8000a28 <HAL_SPI_MspInit+0x90>)
 80009fc:	f000 fa56 	bl	8000eac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a00:	2340      	movs	r3, #64	; 0x40
 8000a02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0310 	add.w	r3, r7, #16
 8000a10:	4619      	mov	r1, r3
 8000a12:	4805      	ldr	r0, [pc, #20]	; (8000a28 <HAL_SPI_MspInit+0x90>)
 8000a14:	f000 fa4a 	bl	8000eac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a18:	bf00      	nop
 8000a1a:	3720      	adds	r7, #32
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40013000 	.word	0x40013000
 8000a24:	40021000 	.word	0x40021000
 8000a28:	40010800 	.word	0x40010800

08000a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <NMI_Handler+0x4>

08000a32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a36:	e7fe      	b.n	8000a36 <HardFault_Handler+0x4>

08000a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <MemManage_Handler+0x4>

08000a3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a42:	e7fe      	b.n	8000a42 <BusFault_Handler+0x4>

08000a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <UsageFault_Handler+0x4>

08000a4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bc80      	pop	{r7}
 8000a54:	4770      	bx	lr

08000a56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bc80      	pop	{r7}
 8000a60:	4770      	bx	lr

08000a62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bc80      	pop	{r7}
 8000a6c:	4770      	bx	lr

08000a6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a72:	f000 f8f7 	bl	8000c64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b086      	sub	sp, #24
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	60f8      	str	r0, [r7, #12]
 8000a82:	60b9      	str	r1, [r7, #8]
 8000a84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a86:	2300      	movs	r3, #0
 8000a88:	617b      	str	r3, [r7, #20]
 8000a8a:	e00a      	b.n	8000aa2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a8c:	f3af 8000 	nop.w
 8000a90:	4601      	mov	r1, r0
 8000a92:	68bb      	ldr	r3, [r7, #8]
 8000a94:	1c5a      	adds	r2, r3, #1
 8000a96:	60ba      	str	r2, [r7, #8]
 8000a98:	b2ca      	uxtb	r2, r1
 8000a9a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	617b      	str	r3, [r7, #20]
 8000aa2:	697a      	ldr	r2, [r7, #20]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	dbf0      	blt.n	8000a8c <_read+0x12>
  }

  return len;
 8000aaa:	687b      	ldr	r3, [r7, #4]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3718      	adds	r7, #24
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000abc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bc80      	pop	{r7}
 8000ac8:	4770      	bx	lr

08000aca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000aca:	b480      	push	{r7}
 8000acc:	b083      	sub	sp, #12
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6078      	str	r0, [r7, #4]
 8000ad2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ada:	605a      	str	r2, [r3, #4]
  return 0;
 8000adc:	2300      	movs	r3, #0
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr

08000ae8 <_isatty>:

int _isatty(int file)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000af0:	2301      	movs	r3, #1
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr

08000afc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b08:	2300      	movs	r3, #0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3714      	adds	r7, #20
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr

08000b14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b086      	sub	sp, #24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b1c:	4a14      	ldr	r2, [pc, #80]	; (8000b70 <_sbrk+0x5c>)
 8000b1e:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <_sbrk+0x60>)
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <_sbrk+0x64>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d102      	bne.n	8000b36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b30:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <_sbrk+0x64>)
 8000b32:	4a12      	ldr	r2, [pc, #72]	; (8000b7c <_sbrk+0x68>)
 8000b34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b36:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <_sbrk+0x64>)
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d207      	bcs.n	8000b54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b44:	f001 fc28 	bl	8002398 <__errno>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	220c      	movs	r2, #12
 8000b4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b52:	e009      	b.n	8000b68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b54:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <_sbrk+0x64>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b5a:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <_sbrk+0x64>)
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4413      	add	r3, r2
 8000b62:	4a05      	ldr	r2, [pc, #20]	; (8000b78 <_sbrk+0x64>)
 8000b64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b66:	68fb      	ldr	r3, [r7, #12]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3718      	adds	r7, #24
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20005000 	.word	0x20005000
 8000b74:	00000400 	.word	0x00000400
 8000b78:	20000130 	.word	0x20000130
 8000b7c:	20000288 	.word	0x20000288

08000b80 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr

08000b8c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b8c:	f7ff fff8 	bl	8000b80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b90:	480b      	ldr	r0, [pc, #44]	; (8000bc0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b92:	490c      	ldr	r1, [pc, #48]	; (8000bc4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b94:	4a0c      	ldr	r2, [pc, #48]	; (8000bc8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b98:	e002      	b.n	8000ba0 <LoopCopyDataInit>

08000b9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9e:	3304      	adds	r3, #4

08000ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba4:	d3f9      	bcc.n	8000b9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba6:	4a09      	ldr	r2, [pc, #36]	; (8000bcc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ba8:	4c09      	ldr	r4, [pc, #36]	; (8000bd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bac:	e001      	b.n	8000bb2 <LoopFillZerobss>

08000bae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb0:	3204      	adds	r2, #4

08000bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb4:	d3fb      	bcc.n	8000bae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bb6:	f001 fbf5 	bl	80023a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bba:	f7ff fb09 	bl	80001d0 <main>
  bx lr
 8000bbe:	4770      	bx	lr
  ldr r0, =_sdata
 8000bc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000bc8:	08003040 	.word	0x08003040
  ldr r2, =_sbss
 8000bcc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000bd0:	20000284 	.word	0x20000284

08000bd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bd4:	e7fe      	b.n	8000bd4 <ADC1_2_IRQHandler>
	...

08000bd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bdc:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <HAL_Init+0x28>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a07      	ldr	r2, [pc, #28]	; (8000c00 <HAL_Init+0x28>)
 8000be2:	f043 0310 	orr.w	r3, r3, #16
 8000be6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be8:	2003      	movs	r0, #3
 8000bea:	f000 f92b 	bl	8000e44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bee:	200f      	movs	r0, #15
 8000bf0:	f000 f808 	bl	8000c04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf4:	f7ff fe5e 	bl	80008b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40022000 	.word	0x40022000

08000c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c0c:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <HAL_InitTick+0x54>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <HAL_InitTick+0x58>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	4619      	mov	r1, r3
 8000c16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c22:	4618      	mov	r0, r3
 8000c24:	f000 f935 	bl	8000e92 <HAL_SYSTICK_Config>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e00e      	b.n	8000c50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2b0f      	cmp	r3, #15
 8000c36:	d80a      	bhi.n	8000c4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	6879      	ldr	r1, [r7, #4]
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	f000 f90b 	bl	8000e5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c44:	4a06      	ldr	r2, [pc, #24]	; (8000c60 <HAL_InitTick+0x5c>)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	e000      	b.n	8000c50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000000 	.word	0x20000000
 8000c5c:	20000008 	.word	0x20000008
 8000c60:	20000004 	.word	0x20000004

08000c64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <HAL_IncTick+0x1c>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <HAL_IncTick+0x20>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4413      	add	r3, r2
 8000c74:	4a03      	ldr	r2, [pc, #12]	; (8000c84 <HAL_IncTick+0x20>)
 8000c76:	6013      	str	r3, [r2, #0]
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr
 8000c80:	20000008 	.word	0x20000008
 8000c84:	20000134 	.word	0x20000134

08000c88 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c8c:	4b02      	ldr	r3, [pc, #8]	; (8000c98 <HAL_GetTick+0x10>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc80      	pop	{r7}
 8000c96:	4770      	bx	lr
 8000c98:	20000134 	.word	0x20000134

08000c9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ca4:	f7ff fff0 	bl	8000c88 <HAL_GetTick>
 8000ca8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cb4:	d005      	beq.n	8000cc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <HAL_Delay+0x44>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	461a      	mov	r2, r3
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cc2:	bf00      	nop
 8000cc4:	f7ff ffe0 	bl	8000c88 <HAL_GetTick>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	68fa      	ldr	r2, [r7, #12]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d8f7      	bhi.n	8000cc4 <HAL_Delay+0x28>
  {
  }
}
 8000cd4:	bf00      	nop
 8000cd6:	bf00      	nop
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000008 	.word	0x20000008

08000ce4 <__NVIC_SetPriorityGrouping>:
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f003 0307 	and.w	r3, r3, #7
 8000cf2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cfa:	68ba      	ldr	r2, [r7, #8]
 8000cfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d00:	4013      	ands	r3, r2
 8000d02:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d16:	4a04      	ldr	r2, [pc, #16]	; (8000d28 <__NVIC_SetPriorityGrouping+0x44>)
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	60d3      	str	r3, [r2, #12]
}
 8000d1c:	bf00      	nop
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bc80      	pop	{r7}
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <__NVIC_GetPriorityGrouping>:
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d30:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <__NVIC_GetPriorityGrouping+0x18>)
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	0a1b      	lsrs	r3, r3, #8
 8000d36:	f003 0307 	and.w	r3, r3, #7
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bc80      	pop	{r7}
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <__NVIC_SetPriority>:
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	6039      	str	r1, [r7, #0]
 8000d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	db0a      	blt.n	8000d72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	b2da      	uxtb	r2, r3
 8000d60:	490c      	ldr	r1, [pc, #48]	; (8000d94 <__NVIC_SetPriority+0x4c>)
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	0112      	lsls	r2, r2, #4
 8000d68:	b2d2      	uxtb	r2, r2
 8000d6a:	440b      	add	r3, r1
 8000d6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000d70:	e00a      	b.n	8000d88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	4908      	ldr	r1, [pc, #32]	; (8000d98 <__NVIC_SetPriority+0x50>)
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	f003 030f 	and.w	r3, r3, #15
 8000d7e:	3b04      	subs	r3, #4
 8000d80:	0112      	lsls	r2, r2, #4
 8000d82:	b2d2      	uxtb	r2, r2
 8000d84:	440b      	add	r3, r1
 8000d86:	761a      	strb	r2, [r3, #24]
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bc80      	pop	{r7}
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	e000e100 	.word	0xe000e100
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <NVIC_EncodePriority>:
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b089      	sub	sp, #36	; 0x24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	60b9      	str	r1, [r7, #8]
 8000da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	f1c3 0307 	rsb	r3, r3, #7
 8000db6:	2b04      	cmp	r3, #4
 8000db8:	bf28      	it	cs
 8000dba:	2304      	movcs	r3, #4
 8000dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	3304      	adds	r3, #4
 8000dc2:	2b06      	cmp	r3, #6
 8000dc4:	d902      	bls.n	8000dcc <NVIC_EncodePriority+0x30>
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	3b03      	subs	r3, #3
 8000dca:	e000      	b.n	8000dce <NVIC_EncodePriority+0x32>
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43da      	mvns	r2, r3
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	401a      	ands	r2, r3
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000de4:	f04f 31ff 	mov.w	r1, #4294967295
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	fa01 f303 	lsl.w	r3, r1, r3
 8000dee:	43d9      	mvns	r1, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df4:	4313      	orrs	r3, r2
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3724      	adds	r7, #36	; 0x24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc80      	pop	{r7}
 8000dfe:	4770      	bx	lr

08000e00 <SysTick_Config>:
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e10:	d301      	bcc.n	8000e16 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000e12:	2301      	movs	r3, #1
 8000e14:	e00f      	b.n	8000e36 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e16:	4a0a      	ldr	r2, [pc, #40]	; (8000e40 <SysTick_Config+0x40>)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e1e:	210f      	movs	r1, #15
 8000e20:	f04f 30ff 	mov.w	r0, #4294967295
 8000e24:	f7ff ff90 	bl	8000d48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e28:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <SysTick_Config+0x40>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e2e:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <SysTick_Config+0x40>)
 8000e30:	2207      	movs	r2, #7
 8000e32:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	e000e010 	.word	0xe000e010

08000e44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f7ff ff49 	bl	8000ce4 <__NVIC_SetPriorityGrouping>
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b086      	sub	sp, #24
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	4603      	mov	r3, r0
 8000e62:	60b9      	str	r1, [r7, #8]
 8000e64:	607a      	str	r2, [r7, #4]
 8000e66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e6c:	f7ff ff5e 	bl	8000d2c <__NVIC_GetPriorityGrouping>
 8000e70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	68b9      	ldr	r1, [r7, #8]
 8000e76:	6978      	ldr	r0, [r7, #20]
 8000e78:	f7ff ff90 	bl	8000d9c <NVIC_EncodePriority>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e82:	4611      	mov	r1, r2
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff ff5f 	bl	8000d48 <__NVIC_SetPriority>
}
 8000e8a:	bf00      	nop
 8000e8c:	3718      	adds	r7, #24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f7ff ffb0 	bl	8000e00 <SysTick_Config>
 8000ea0:	4603      	mov	r3, r0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b08b      	sub	sp, #44	; 0x2c
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ebe:	e169      	b.n	8001194 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	69fa      	ldr	r2, [r7, #28]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	f040 8158 	bne.w	800118e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	4a9a      	ldr	r2, [pc, #616]	; (800114c <HAL_GPIO_Init+0x2a0>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d05e      	beq.n	8000fa6 <HAL_GPIO_Init+0xfa>
 8000ee8:	4a98      	ldr	r2, [pc, #608]	; (800114c <HAL_GPIO_Init+0x2a0>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d875      	bhi.n	8000fda <HAL_GPIO_Init+0x12e>
 8000eee:	4a98      	ldr	r2, [pc, #608]	; (8001150 <HAL_GPIO_Init+0x2a4>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d058      	beq.n	8000fa6 <HAL_GPIO_Init+0xfa>
 8000ef4:	4a96      	ldr	r2, [pc, #600]	; (8001150 <HAL_GPIO_Init+0x2a4>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d86f      	bhi.n	8000fda <HAL_GPIO_Init+0x12e>
 8000efa:	4a96      	ldr	r2, [pc, #600]	; (8001154 <HAL_GPIO_Init+0x2a8>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d052      	beq.n	8000fa6 <HAL_GPIO_Init+0xfa>
 8000f00:	4a94      	ldr	r2, [pc, #592]	; (8001154 <HAL_GPIO_Init+0x2a8>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d869      	bhi.n	8000fda <HAL_GPIO_Init+0x12e>
 8000f06:	4a94      	ldr	r2, [pc, #592]	; (8001158 <HAL_GPIO_Init+0x2ac>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d04c      	beq.n	8000fa6 <HAL_GPIO_Init+0xfa>
 8000f0c:	4a92      	ldr	r2, [pc, #584]	; (8001158 <HAL_GPIO_Init+0x2ac>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d863      	bhi.n	8000fda <HAL_GPIO_Init+0x12e>
 8000f12:	4a92      	ldr	r2, [pc, #584]	; (800115c <HAL_GPIO_Init+0x2b0>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d046      	beq.n	8000fa6 <HAL_GPIO_Init+0xfa>
 8000f18:	4a90      	ldr	r2, [pc, #576]	; (800115c <HAL_GPIO_Init+0x2b0>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d85d      	bhi.n	8000fda <HAL_GPIO_Init+0x12e>
 8000f1e:	2b12      	cmp	r3, #18
 8000f20:	d82a      	bhi.n	8000f78 <HAL_GPIO_Init+0xcc>
 8000f22:	2b12      	cmp	r3, #18
 8000f24:	d859      	bhi.n	8000fda <HAL_GPIO_Init+0x12e>
 8000f26:	a201      	add	r2, pc, #4	; (adr r2, 8000f2c <HAL_GPIO_Init+0x80>)
 8000f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f2c:	08000fa7 	.word	0x08000fa7
 8000f30:	08000f81 	.word	0x08000f81
 8000f34:	08000f93 	.word	0x08000f93
 8000f38:	08000fd5 	.word	0x08000fd5
 8000f3c:	08000fdb 	.word	0x08000fdb
 8000f40:	08000fdb 	.word	0x08000fdb
 8000f44:	08000fdb 	.word	0x08000fdb
 8000f48:	08000fdb 	.word	0x08000fdb
 8000f4c:	08000fdb 	.word	0x08000fdb
 8000f50:	08000fdb 	.word	0x08000fdb
 8000f54:	08000fdb 	.word	0x08000fdb
 8000f58:	08000fdb 	.word	0x08000fdb
 8000f5c:	08000fdb 	.word	0x08000fdb
 8000f60:	08000fdb 	.word	0x08000fdb
 8000f64:	08000fdb 	.word	0x08000fdb
 8000f68:	08000fdb 	.word	0x08000fdb
 8000f6c:	08000fdb 	.word	0x08000fdb
 8000f70:	08000f89 	.word	0x08000f89
 8000f74:	08000f9d 	.word	0x08000f9d
 8000f78:	4a79      	ldr	r2, [pc, #484]	; (8001160 <HAL_GPIO_Init+0x2b4>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d013      	beq.n	8000fa6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f7e:	e02c      	b.n	8000fda <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	623b      	str	r3, [r7, #32]
          break;
 8000f86:	e029      	b.n	8000fdc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	3304      	adds	r3, #4
 8000f8e:	623b      	str	r3, [r7, #32]
          break;
 8000f90:	e024      	b.n	8000fdc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	68db      	ldr	r3, [r3, #12]
 8000f96:	3308      	adds	r3, #8
 8000f98:	623b      	str	r3, [r7, #32]
          break;
 8000f9a:	e01f      	b.n	8000fdc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	330c      	adds	r3, #12
 8000fa2:	623b      	str	r3, [r7, #32]
          break;
 8000fa4:	e01a      	b.n	8000fdc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d102      	bne.n	8000fb4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fae:	2304      	movs	r3, #4
 8000fb0:	623b      	str	r3, [r7, #32]
          break;
 8000fb2:	e013      	b.n	8000fdc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d105      	bne.n	8000fc8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fbc:	2308      	movs	r3, #8
 8000fbe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	69fa      	ldr	r2, [r7, #28]
 8000fc4:	611a      	str	r2, [r3, #16]
          break;
 8000fc6:	e009      	b.n	8000fdc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fc8:	2308      	movs	r3, #8
 8000fca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	69fa      	ldr	r2, [r7, #28]
 8000fd0:	615a      	str	r2, [r3, #20]
          break;
 8000fd2:	e003      	b.n	8000fdc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	623b      	str	r3, [r7, #32]
          break;
 8000fd8:	e000      	b.n	8000fdc <HAL_GPIO_Init+0x130>
          break;
 8000fda:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	2bff      	cmp	r3, #255	; 0xff
 8000fe0:	d801      	bhi.n	8000fe6 <HAL_GPIO_Init+0x13a>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	e001      	b.n	8000fea <HAL_GPIO_Init+0x13e>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	3304      	adds	r3, #4
 8000fea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	2bff      	cmp	r3, #255	; 0xff
 8000ff0:	d802      	bhi.n	8000ff8 <HAL_GPIO_Init+0x14c>
 8000ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	e002      	b.n	8000ffe <HAL_GPIO_Init+0x152>
 8000ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffa:	3b08      	subs	r3, #8
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	210f      	movs	r1, #15
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	fa01 f303 	lsl.w	r3, r1, r3
 800100c:	43db      	mvns	r3, r3
 800100e:	401a      	ands	r2, r3
 8001010:	6a39      	ldr	r1, [r7, #32]
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	fa01 f303 	lsl.w	r3, r1, r3
 8001018:	431a      	orrs	r2, r3
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001026:	2b00      	cmp	r3, #0
 8001028:	f000 80b1 	beq.w	800118e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800102c:	4b4d      	ldr	r3, [pc, #308]	; (8001164 <HAL_GPIO_Init+0x2b8>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	4a4c      	ldr	r2, [pc, #304]	; (8001164 <HAL_GPIO_Init+0x2b8>)
 8001032:	f043 0301 	orr.w	r3, r3, #1
 8001036:	6193      	str	r3, [r2, #24]
 8001038:	4b4a      	ldr	r3, [pc, #296]	; (8001164 <HAL_GPIO_Init+0x2b8>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	60bb      	str	r3, [r7, #8]
 8001042:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001044:	4a48      	ldr	r2, [pc, #288]	; (8001168 <HAL_GPIO_Init+0x2bc>)
 8001046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001048:	089b      	lsrs	r3, r3, #2
 800104a:	3302      	adds	r3, #2
 800104c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001050:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001054:	f003 0303 	and.w	r3, r3, #3
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	220f      	movs	r2, #15
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	68fa      	ldr	r2, [r7, #12]
 8001064:	4013      	ands	r3, r2
 8001066:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4a40      	ldr	r2, [pc, #256]	; (800116c <HAL_GPIO_Init+0x2c0>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d013      	beq.n	8001098 <HAL_GPIO_Init+0x1ec>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4a3f      	ldr	r2, [pc, #252]	; (8001170 <HAL_GPIO_Init+0x2c4>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d00d      	beq.n	8001094 <HAL_GPIO_Init+0x1e8>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4a3e      	ldr	r2, [pc, #248]	; (8001174 <HAL_GPIO_Init+0x2c8>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d007      	beq.n	8001090 <HAL_GPIO_Init+0x1e4>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4a3d      	ldr	r2, [pc, #244]	; (8001178 <HAL_GPIO_Init+0x2cc>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d101      	bne.n	800108c <HAL_GPIO_Init+0x1e0>
 8001088:	2303      	movs	r3, #3
 800108a:	e006      	b.n	800109a <HAL_GPIO_Init+0x1ee>
 800108c:	2304      	movs	r3, #4
 800108e:	e004      	b.n	800109a <HAL_GPIO_Init+0x1ee>
 8001090:	2302      	movs	r3, #2
 8001092:	e002      	b.n	800109a <HAL_GPIO_Init+0x1ee>
 8001094:	2301      	movs	r3, #1
 8001096:	e000      	b.n	800109a <HAL_GPIO_Init+0x1ee>
 8001098:	2300      	movs	r3, #0
 800109a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800109c:	f002 0203 	and.w	r2, r2, #3
 80010a0:	0092      	lsls	r2, r2, #2
 80010a2:	4093      	lsls	r3, r2
 80010a4:	68fa      	ldr	r2, [r7, #12]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010aa:	492f      	ldr	r1, [pc, #188]	; (8001168 <HAL_GPIO_Init+0x2bc>)
 80010ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ae:	089b      	lsrs	r3, r3, #2
 80010b0:	3302      	adds	r3, #2
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d006      	beq.n	80010d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010c4:	4b2d      	ldr	r3, [pc, #180]	; (800117c <HAL_GPIO_Init+0x2d0>)
 80010c6:	689a      	ldr	r2, [r3, #8]
 80010c8:	492c      	ldr	r1, [pc, #176]	; (800117c <HAL_GPIO_Init+0x2d0>)
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	608b      	str	r3, [r1, #8]
 80010d0:	e006      	b.n	80010e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010d2:	4b2a      	ldr	r3, [pc, #168]	; (800117c <HAL_GPIO_Init+0x2d0>)
 80010d4:	689a      	ldr	r2, [r3, #8]
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	43db      	mvns	r3, r3
 80010da:	4928      	ldr	r1, [pc, #160]	; (800117c <HAL_GPIO_Init+0x2d0>)
 80010dc:	4013      	ands	r3, r2
 80010de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d006      	beq.n	80010fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010ec:	4b23      	ldr	r3, [pc, #140]	; (800117c <HAL_GPIO_Init+0x2d0>)
 80010ee:	68da      	ldr	r2, [r3, #12]
 80010f0:	4922      	ldr	r1, [pc, #136]	; (800117c <HAL_GPIO_Init+0x2d0>)
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	60cb      	str	r3, [r1, #12]
 80010f8:	e006      	b.n	8001108 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010fa:	4b20      	ldr	r3, [pc, #128]	; (800117c <HAL_GPIO_Init+0x2d0>)
 80010fc:	68da      	ldr	r2, [r3, #12]
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	43db      	mvns	r3, r3
 8001102:	491e      	ldr	r1, [pc, #120]	; (800117c <HAL_GPIO_Init+0x2d0>)
 8001104:	4013      	ands	r3, r2
 8001106:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d006      	beq.n	8001122 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001114:	4b19      	ldr	r3, [pc, #100]	; (800117c <HAL_GPIO_Init+0x2d0>)
 8001116:	685a      	ldr	r2, [r3, #4]
 8001118:	4918      	ldr	r1, [pc, #96]	; (800117c <HAL_GPIO_Init+0x2d0>)
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	4313      	orrs	r3, r2
 800111e:	604b      	str	r3, [r1, #4]
 8001120:	e006      	b.n	8001130 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001122:	4b16      	ldr	r3, [pc, #88]	; (800117c <HAL_GPIO_Init+0x2d0>)
 8001124:	685a      	ldr	r2, [r3, #4]
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	43db      	mvns	r3, r3
 800112a:	4914      	ldr	r1, [pc, #80]	; (800117c <HAL_GPIO_Init+0x2d0>)
 800112c:	4013      	ands	r3, r2
 800112e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001138:	2b00      	cmp	r3, #0
 800113a:	d021      	beq.n	8001180 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800113c:	4b0f      	ldr	r3, [pc, #60]	; (800117c <HAL_GPIO_Init+0x2d0>)
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	490e      	ldr	r1, [pc, #56]	; (800117c <HAL_GPIO_Init+0x2d0>)
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	4313      	orrs	r3, r2
 8001146:	600b      	str	r3, [r1, #0]
 8001148:	e021      	b.n	800118e <HAL_GPIO_Init+0x2e2>
 800114a:	bf00      	nop
 800114c:	10320000 	.word	0x10320000
 8001150:	10310000 	.word	0x10310000
 8001154:	10220000 	.word	0x10220000
 8001158:	10210000 	.word	0x10210000
 800115c:	10120000 	.word	0x10120000
 8001160:	10110000 	.word	0x10110000
 8001164:	40021000 	.word	0x40021000
 8001168:	40010000 	.word	0x40010000
 800116c:	40010800 	.word	0x40010800
 8001170:	40010c00 	.word	0x40010c00
 8001174:	40011000 	.word	0x40011000
 8001178:	40011400 	.word	0x40011400
 800117c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001180:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <HAL_GPIO_Init+0x304>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	43db      	mvns	r3, r3
 8001188:	4909      	ldr	r1, [pc, #36]	; (80011b0 <HAL_GPIO_Init+0x304>)
 800118a:	4013      	ands	r3, r2
 800118c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800118e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001190:	3301      	adds	r3, #1
 8001192:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119a:	fa22 f303 	lsr.w	r3, r2, r3
 800119e:	2b00      	cmp	r3, #0
 80011a0:	f47f ae8e 	bne.w	8000ec0 <HAL_GPIO_Init+0x14>
  }
}
 80011a4:	bf00      	nop
 80011a6:	bf00      	nop
 80011a8:	372c      	adds	r7, #44	; 0x2c
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr
 80011b0:	40010400 	.word	0x40010400

080011b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d101      	bne.n	80011c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e12b      	b.n	800141e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d106      	bne.n	80011e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2200      	movs	r2, #0
 80011d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f7ff fb9c 	bl	8000918 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2224      	movs	r2, #36	; 0x24
 80011e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f022 0201 	bic.w	r2, r2, #1
 80011f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001206:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001216:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001218:	f000 fd0e 	bl	8001c38 <HAL_RCC_GetPCLK1Freq>
 800121c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	4a81      	ldr	r2, [pc, #516]	; (8001428 <HAL_I2C_Init+0x274>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d807      	bhi.n	8001238 <HAL_I2C_Init+0x84>
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4a80      	ldr	r2, [pc, #512]	; (800142c <HAL_I2C_Init+0x278>)
 800122c:	4293      	cmp	r3, r2
 800122e:	bf94      	ite	ls
 8001230:	2301      	movls	r3, #1
 8001232:	2300      	movhi	r3, #0
 8001234:	b2db      	uxtb	r3, r3
 8001236:	e006      	b.n	8001246 <HAL_I2C_Init+0x92>
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4a7d      	ldr	r2, [pc, #500]	; (8001430 <HAL_I2C_Init+0x27c>)
 800123c:	4293      	cmp	r3, r2
 800123e:	bf94      	ite	ls
 8001240:	2301      	movls	r3, #1
 8001242:	2300      	movhi	r3, #0
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e0e7      	b.n	800141e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	4a78      	ldr	r2, [pc, #480]	; (8001434 <HAL_I2C_Init+0x280>)
 8001252:	fba2 2303 	umull	r2, r3, r2, r3
 8001256:	0c9b      	lsrs	r3, r3, #18
 8001258:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	68ba      	ldr	r2, [r7, #8]
 800126a:	430a      	orrs	r2, r1
 800126c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	6a1b      	ldr	r3, [r3, #32]
 8001274:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	4a6a      	ldr	r2, [pc, #424]	; (8001428 <HAL_I2C_Init+0x274>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d802      	bhi.n	8001288 <HAL_I2C_Init+0xd4>
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	3301      	adds	r3, #1
 8001286:	e009      	b.n	800129c <HAL_I2C_Init+0xe8>
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800128e:	fb02 f303 	mul.w	r3, r2, r3
 8001292:	4a69      	ldr	r2, [pc, #420]	; (8001438 <HAL_I2C_Init+0x284>)
 8001294:	fba2 2303 	umull	r2, r3, r2, r3
 8001298:	099b      	lsrs	r3, r3, #6
 800129a:	3301      	adds	r3, #1
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	6812      	ldr	r2, [r2, #0]
 80012a0:	430b      	orrs	r3, r1
 80012a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80012ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	495c      	ldr	r1, [pc, #368]	; (8001428 <HAL_I2C_Init+0x274>)
 80012b8:	428b      	cmp	r3, r1
 80012ba:	d819      	bhi.n	80012f0 <HAL_I2C_Init+0x13c>
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	1e59      	subs	r1, r3, #1
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80012ca:	1c59      	adds	r1, r3, #1
 80012cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80012d0:	400b      	ands	r3, r1
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d00a      	beq.n	80012ec <HAL_I2C_Init+0x138>
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	1e59      	subs	r1, r3, #1
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80012e4:	3301      	adds	r3, #1
 80012e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012ea:	e051      	b.n	8001390 <HAL_I2C_Init+0x1dc>
 80012ec:	2304      	movs	r3, #4
 80012ee:	e04f      	b.n	8001390 <HAL_I2C_Init+0x1dc>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d111      	bne.n	800131c <HAL_I2C_Init+0x168>
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	1e58      	subs	r0, r3, #1
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6859      	ldr	r1, [r3, #4]
 8001300:	460b      	mov	r3, r1
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	440b      	add	r3, r1
 8001306:	fbb0 f3f3 	udiv	r3, r0, r3
 800130a:	3301      	adds	r3, #1
 800130c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001310:	2b00      	cmp	r3, #0
 8001312:	bf0c      	ite	eq
 8001314:	2301      	moveq	r3, #1
 8001316:	2300      	movne	r3, #0
 8001318:	b2db      	uxtb	r3, r3
 800131a:	e012      	b.n	8001342 <HAL_I2C_Init+0x18e>
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	1e58      	subs	r0, r3, #1
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6859      	ldr	r1, [r3, #4]
 8001324:	460b      	mov	r3, r1
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	440b      	add	r3, r1
 800132a:	0099      	lsls	r1, r3, #2
 800132c:	440b      	add	r3, r1
 800132e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001332:	3301      	adds	r3, #1
 8001334:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001338:	2b00      	cmp	r3, #0
 800133a:	bf0c      	ite	eq
 800133c:	2301      	moveq	r3, #1
 800133e:	2300      	movne	r3, #0
 8001340:	b2db      	uxtb	r3, r3
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <HAL_I2C_Init+0x196>
 8001346:	2301      	movs	r3, #1
 8001348:	e022      	b.n	8001390 <HAL_I2C_Init+0x1dc>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d10e      	bne.n	8001370 <HAL_I2C_Init+0x1bc>
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	1e58      	subs	r0, r3, #1
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6859      	ldr	r1, [r3, #4]
 800135a:	460b      	mov	r3, r1
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	440b      	add	r3, r1
 8001360:	fbb0 f3f3 	udiv	r3, r0, r3
 8001364:	3301      	adds	r3, #1
 8001366:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800136a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800136e:	e00f      	b.n	8001390 <HAL_I2C_Init+0x1dc>
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	1e58      	subs	r0, r3, #1
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6859      	ldr	r1, [r3, #4]
 8001378:	460b      	mov	r3, r1
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	440b      	add	r3, r1
 800137e:	0099      	lsls	r1, r3, #2
 8001380:	440b      	add	r3, r1
 8001382:	fbb0 f3f3 	udiv	r3, r0, r3
 8001386:	3301      	adds	r3, #1
 8001388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800138c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001390:	6879      	ldr	r1, [r7, #4]
 8001392:	6809      	ldr	r1, [r1, #0]
 8001394:	4313      	orrs	r3, r2
 8001396:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	69da      	ldr	r2, [r3, #28]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a1b      	ldr	r3, [r3, #32]
 80013aa:	431a      	orrs	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	430a      	orrs	r2, r1
 80013b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80013be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	6911      	ldr	r1, [r2, #16]
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	68d2      	ldr	r2, [r2, #12]
 80013ca:	4311      	orrs	r1, r2
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	6812      	ldr	r2, [r2, #0]
 80013d0:	430b      	orrs	r3, r1
 80013d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	695a      	ldr	r2, [r3, #20]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	431a      	orrs	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	430a      	orrs	r2, r1
 80013ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f042 0201 	orr.w	r2, r2, #1
 80013fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2220      	movs	r2, #32
 800140a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2200      	movs	r2, #0
 8001412:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	000186a0 	.word	0x000186a0
 800142c:	001e847f 	.word	0x001e847f
 8001430:	003d08ff 	.word	0x003d08ff
 8001434:	431bde83 	.word	0x431bde83
 8001438:	10624dd3 	.word	0x10624dd3

0800143c <HAL_PWR_EnableWakeUpPin>:
  *        This parameter can be one of the following values:
  *           @arg PWR_WAKEUP_PIN1
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	fa93 f3a3 	rbit	r3, r3
 800144e:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001450:	68bb      	ldr	r3, [r7, #8]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Enable the EWUPx pin */
  *(__IO uint32_t *) CSR_EWUP_BB(WakeUpPinx) = (uint32_t)ENABLE;
 8001452:	fab3 f383 	clz	r3, r3
 8001456:	b2db      	uxtb	r3, r3
 8001458:	461a      	mov	r2, r3
 800145a:	4b05      	ldr	r3, [pc, #20]	; (8001470 <HAL_PWR_EnableWakeUpPin+0x34>)
 800145c:	4413      	add	r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	461a      	mov	r2, r3
 8001462:	2301      	movs	r3, #1
 8001464:	6013      	str	r3, [r2, #0]
}
 8001466:	bf00      	nop
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr
 8001470:	10838020 	.word	0x10838020

08001474 <HAL_PWR_EnterSTANDBYMode>:
  *          - TAMPER pin if configured for tamper or calibration out.
  *          - WKUP pin (PA0) if enabled.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8001478:	4b08      	ldr	r3, [pc, #32]	; (800149c <HAL_PWR_EnterSTANDBYMode+0x28>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a07      	ldr	r2, [pc, #28]	; (800149c <HAL_PWR_EnterSTANDBYMode+0x28>)
 800147e:	f043 0302 	orr.w	r3, r3, #2
 8001482:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001484:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8001486:	691b      	ldr	r3, [r3, #16]
 8001488:	4a05      	ldr	r2, [pc, #20]	; (80014a0 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800148a:	f043 0304 	orr.w	r3, r3, #4
 800148e:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8001490:	bf30      	wfi
}
 8001492:	bf00      	nop
 8001494:	46bd      	mov	sp, r7
 8001496:	bc80      	pop	{r7}
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	40007000 	.word	0x40007000
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d101      	bne.n	80014b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e272      	b.n	800199c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	2b00      	cmp	r3, #0
 80014c0:	f000 8087 	beq.w	80015d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014c4:	4b92      	ldr	r3, [pc, #584]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 030c 	and.w	r3, r3, #12
 80014cc:	2b04      	cmp	r3, #4
 80014ce:	d00c      	beq.n	80014ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014d0:	4b8f      	ldr	r3, [pc, #572]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f003 030c 	and.w	r3, r3, #12
 80014d8:	2b08      	cmp	r3, #8
 80014da:	d112      	bne.n	8001502 <HAL_RCC_OscConfig+0x5e>
 80014dc:	4b8c      	ldr	r3, [pc, #560]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014e8:	d10b      	bne.n	8001502 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ea:	4b89      	ldr	r3, [pc, #548]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d06c      	beq.n	80015d0 <HAL_RCC_OscConfig+0x12c>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d168      	bne.n	80015d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e24c      	b.n	800199c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800150a:	d106      	bne.n	800151a <HAL_RCC_OscConfig+0x76>
 800150c:	4b80      	ldr	r3, [pc, #512]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a7f      	ldr	r2, [pc, #508]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 8001512:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001516:	6013      	str	r3, [r2, #0]
 8001518:	e02e      	b.n	8001578 <HAL_RCC_OscConfig+0xd4>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d10c      	bne.n	800153c <HAL_RCC_OscConfig+0x98>
 8001522:	4b7b      	ldr	r3, [pc, #492]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a7a      	ldr	r2, [pc, #488]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 8001528:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800152c:	6013      	str	r3, [r2, #0]
 800152e:	4b78      	ldr	r3, [pc, #480]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a77      	ldr	r2, [pc, #476]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 8001534:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	e01d      	b.n	8001578 <HAL_RCC_OscConfig+0xd4>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001544:	d10c      	bne.n	8001560 <HAL_RCC_OscConfig+0xbc>
 8001546:	4b72      	ldr	r3, [pc, #456]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a71      	ldr	r2, [pc, #452]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 800154c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001550:	6013      	str	r3, [r2, #0]
 8001552:	4b6f      	ldr	r3, [pc, #444]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a6e      	ldr	r2, [pc, #440]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 8001558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800155c:	6013      	str	r3, [r2, #0]
 800155e:	e00b      	b.n	8001578 <HAL_RCC_OscConfig+0xd4>
 8001560:	4b6b      	ldr	r3, [pc, #428]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a6a      	ldr	r2, [pc, #424]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 8001566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800156a:	6013      	str	r3, [r2, #0]
 800156c:	4b68      	ldr	r3, [pc, #416]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a67      	ldr	r2, [pc, #412]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 8001572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001576:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d013      	beq.n	80015a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001580:	f7ff fb82 	bl	8000c88 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001588:	f7ff fb7e 	bl	8000c88 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b64      	cmp	r3, #100	; 0x64
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e200      	b.n	800199c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800159a:	4b5d      	ldr	r3, [pc, #372]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d0f0      	beq.n	8001588 <HAL_RCC_OscConfig+0xe4>
 80015a6:	e014      	b.n	80015d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a8:	f7ff fb6e 	bl	8000c88 <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015b0:	f7ff fb6a 	bl	8000c88 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b64      	cmp	r3, #100	; 0x64
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e1ec      	b.n	800199c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015c2:	4b53      	ldr	r3, [pc, #332]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1f0      	bne.n	80015b0 <HAL_RCC_OscConfig+0x10c>
 80015ce:	e000      	b.n	80015d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d063      	beq.n	80016a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015de:	4b4c      	ldr	r3, [pc, #304]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f003 030c 	and.w	r3, r3, #12
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d00b      	beq.n	8001602 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015ea:	4b49      	ldr	r3, [pc, #292]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f003 030c 	and.w	r3, r3, #12
 80015f2:	2b08      	cmp	r3, #8
 80015f4:	d11c      	bne.n	8001630 <HAL_RCC_OscConfig+0x18c>
 80015f6:	4b46      	ldr	r3, [pc, #280]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d116      	bne.n	8001630 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001602:	4b43      	ldr	r3, [pc, #268]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d005      	beq.n	800161a <HAL_RCC_OscConfig+0x176>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d001      	beq.n	800161a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e1c0      	b.n	800199c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800161a:	4b3d      	ldr	r3, [pc, #244]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	695b      	ldr	r3, [r3, #20]
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	4939      	ldr	r1, [pc, #228]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 800162a:	4313      	orrs	r3, r2
 800162c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800162e:	e03a      	b.n	80016a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	691b      	ldr	r3, [r3, #16]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d020      	beq.n	800167a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001638:	4b36      	ldr	r3, [pc, #216]	; (8001714 <HAL_RCC_OscConfig+0x270>)
 800163a:	2201      	movs	r2, #1
 800163c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163e:	f7ff fb23 	bl	8000c88 <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001646:	f7ff fb1f 	bl	8000c88 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e1a1      	b.n	800199c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001658:	4b2d      	ldr	r3, [pc, #180]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d0f0      	beq.n	8001646 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001664:	4b2a      	ldr	r3, [pc, #168]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	695b      	ldr	r3, [r3, #20]
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	4927      	ldr	r1, [pc, #156]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 8001674:	4313      	orrs	r3, r2
 8001676:	600b      	str	r3, [r1, #0]
 8001678:	e015      	b.n	80016a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800167a:	4b26      	ldr	r3, [pc, #152]	; (8001714 <HAL_RCC_OscConfig+0x270>)
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001680:	f7ff fb02 	bl	8000c88 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001688:	f7ff fafe 	bl	8000c88 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e180      	b.n	800199c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800169a:	4b1d      	ldr	r3, [pc, #116]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f0      	bne.n	8001688 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0308 	and.w	r3, r3, #8
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d03a      	beq.n	8001728 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d019      	beq.n	80016ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016ba:	4b17      	ldr	r3, [pc, #92]	; (8001718 <HAL_RCC_OscConfig+0x274>)
 80016bc:	2201      	movs	r2, #1
 80016be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c0:	f7ff fae2 	bl	8000c88 <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016c8:	f7ff fade 	bl	8000c88 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e160      	b.n	800199c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016da:	4b0d      	ldr	r3, [pc, #52]	; (8001710 <HAL_RCC_OscConfig+0x26c>)
 80016dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d0f0      	beq.n	80016c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016e6:	2001      	movs	r0, #1
 80016e8:	f000 faba 	bl	8001c60 <RCC_Delay>
 80016ec:	e01c      	b.n	8001728 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016ee:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <HAL_RCC_OscConfig+0x274>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f4:	f7ff fac8 	bl	8000c88 <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016fa:	e00f      	b.n	800171c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016fc:	f7ff fac4 	bl	8000c88 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d908      	bls.n	800171c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e146      	b.n	800199c <HAL_RCC_OscConfig+0x4f8>
 800170e:	bf00      	nop
 8001710:	40021000 	.word	0x40021000
 8001714:	42420000 	.word	0x42420000
 8001718:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800171c:	4b92      	ldr	r3, [pc, #584]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 800171e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1e9      	bne.n	80016fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0304 	and.w	r3, r3, #4
 8001730:	2b00      	cmp	r3, #0
 8001732:	f000 80a6 	beq.w	8001882 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001736:	2300      	movs	r3, #0
 8001738:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800173a:	4b8b      	ldr	r3, [pc, #556]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 800173c:	69db      	ldr	r3, [r3, #28]
 800173e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d10d      	bne.n	8001762 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001746:	4b88      	ldr	r3, [pc, #544]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	4a87      	ldr	r2, [pc, #540]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 800174c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001750:	61d3      	str	r3, [r2, #28]
 8001752:	4b85      	ldr	r3, [pc, #532]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800175e:	2301      	movs	r3, #1
 8001760:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001762:	4b82      	ldr	r3, [pc, #520]	; (800196c <HAL_RCC_OscConfig+0x4c8>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800176a:	2b00      	cmp	r3, #0
 800176c:	d118      	bne.n	80017a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800176e:	4b7f      	ldr	r3, [pc, #508]	; (800196c <HAL_RCC_OscConfig+0x4c8>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a7e      	ldr	r2, [pc, #504]	; (800196c <HAL_RCC_OscConfig+0x4c8>)
 8001774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001778:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800177a:	f7ff fa85 	bl	8000c88 <HAL_GetTick>
 800177e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001780:	e008      	b.n	8001794 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001782:	f7ff fa81 	bl	8000c88 <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b64      	cmp	r3, #100	; 0x64
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e103      	b.n	800199c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001794:	4b75      	ldr	r3, [pc, #468]	; (800196c <HAL_RCC_OscConfig+0x4c8>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800179c:	2b00      	cmp	r3, #0
 800179e:	d0f0      	beq.n	8001782 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d106      	bne.n	80017b6 <HAL_RCC_OscConfig+0x312>
 80017a8:	4b6f      	ldr	r3, [pc, #444]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 80017aa:	6a1b      	ldr	r3, [r3, #32]
 80017ac:	4a6e      	ldr	r2, [pc, #440]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 80017ae:	f043 0301 	orr.w	r3, r3, #1
 80017b2:	6213      	str	r3, [r2, #32]
 80017b4:	e02d      	b.n	8001812 <HAL_RCC_OscConfig+0x36e>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d10c      	bne.n	80017d8 <HAL_RCC_OscConfig+0x334>
 80017be:	4b6a      	ldr	r3, [pc, #424]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 80017c0:	6a1b      	ldr	r3, [r3, #32]
 80017c2:	4a69      	ldr	r2, [pc, #420]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 80017c4:	f023 0301 	bic.w	r3, r3, #1
 80017c8:	6213      	str	r3, [r2, #32]
 80017ca:	4b67      	ldr	r3, [pc, #412]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 80017cc:	6a1b      	ldr	r3, [r3, #32]
 80017ce:	4a66      	ldr	r2, [pc, #408]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 80017d0:	f023 0304 	bic.w	r3, r3, #4
 80017d4:	6213      	str	r3, [r2, #32]
 80017d6:	e01c      	b.n	8001812 <HAL_RCC_OscConfig+0x36e>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	2b05      	cmp	r3, #5
 80017de:	d10c      	bne.n	80017fa <HAL_RCC_OscConfig+0x356>
 80017e0:	4b61      	ldr	r3, [pc, #388]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 80017e2:	6a1b      	ldr	r3, [r3, #32]
 80017e4:	4a60      	ldr	r2, [pc, #384]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 80017e6:	f043 0304 	orr.w	r3, r3, #4
 80017ea:	6213      	str	r3, [r2, #32]
 80017ec:	4b5e      	ldr	r3, [pc, #376]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 80017ee:	6a1b      	ldr	r3, [r3, #32]
 80017f0:	4a5d      	ldr	r2, [pc, #372]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 80017f2:	f043 0301 	orr.w	r3, r3, #1
 80017f6:	6213      	str	r3, [r2, #32]
 80017f8:	e00b      	b.n	8001812 <HAL_RCC_OscConfig+0x36e>
 80017fa:	4b5b      	ldr	r3, [pc, #364]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 80017fc:	6a1b      	ldr	r3, [r3, #32]
 80017fe:	4a5a      	ldr	r2, [pc, #360]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 8001800:	f023 0301 	bic.w	r3, r3, #1
 8001804:	6213      	str	r3, [r2, #32]
 8001806:	4b58      	ldr	r3, [pc, #352]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 8001808:	6a1b      	ldr	r3, [r3, #32]
 800180a:	4a57      	ldr	r2, [pc, #348]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 800180c:	f023 0304 	bic.w	r3, r3, #4
 8001810:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d015      	beq.n	8001846 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800181a:	f7ff fa35 	bl	8000c88 <HAL_GetTick>
 800181e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001820:	e00a      	b.n	8001838 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001822:	f7ff fa31 	bl	8000c88 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001830:	4293      	cmp	r3, r2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e0b1      	b.n	800199c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001838:	4b4b      	ldr	r3, [pc, #300]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 800183a:	6a1b      	ldr	r3, [r3, #32]
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d0ee      	beq.n	8001822 <HAL_RCC_OscConfig+0x37e>
 8001844:	e014      	b.n	8001870 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001846:	f7ff fa1f 	bl	8000c88 <HAL_GetTick>
 800184a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800184c:	e00a      	b.n	8001864 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800184e:	f7ff fa1b 	bl	8000c88 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	f241 3288 	movw	r2, #5000	; 0x1388
 800185c:	4293      	cmp	r3, r2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e09b      	b.n	800199c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001864:	4b40      	ldr	r3, [pc, #256]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d1ee      	bne.n	800184e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001870:	7dfb      	ldrb	r3, [r7, #23]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d105      	bne.n	8001882 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001876:	4b3c      	ldr	r3, [pc, #240]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 8001878:	69db      	ldr	r3, [r3, #28]
 800187a:	4a3b      	ldr	r2, [pc, #236]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 800187c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001880:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	69db      	ldr	r3, [r3, #28]
 8001886:	2b00      	cmp	r3, #0
 8001888:	f000 8087 	beq.w	800199a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800188c:	4b36      	ldr	r3, [pc, #216]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f003 030c 	and.w	r3, r3, #12
 8001894:	2b08      	cmp	r3, #8
 8001896:	d061      	beq.n	800195c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	69db      	ldr	r3, [r3, #28]
 800189c:	2b02      	cmp	r3, #2
 800189e:	d146      	bne.n	800192e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a0:	4b33      	ldr	r3, [pc, #204]	; (8001970 <HAL_RCC_OscConfig+0x4cc>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a6:	f7ff f9ef 	bl	8000c88 <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ac:	e008      	b.n	80018c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ae:	f7ff f9eb 	bl	8000c88 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e06d      	b.n	800199c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018c0:	4b29      	ldr	r3, [pc, #164]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d1f0      	bne.n	80018ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a1b      	ldr	r3, [r3, #32]
 80018d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018d4:	d108      	bne.n	80018e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018d6:	4b24      	ldr	r3, [pc, #144]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	4921      	ldr	r1, [pc, #132]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 80018e4:	4313      	orrs	r3, r2
 80018e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018e8:	4b1f      	ldr	r3, [pc, #124]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a19      	ldr	r1, [r3, #32]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f8:	430b      	orrs	r3, r1
 80018fa:	491b      	ldr	r1, [pc, #108]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 80018fc:	4313      	orrs	r3, r2
 80018fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001900:	4b1b      	ldr	r3, [pc, #108]	; (8001970 <HAL_RCC_OscConfig+0x4cc>)
 8001902:	2201      	movs	r2, #1
 8001904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001906:	f7ff f9bf 	bl	8000c88 <HAL_GetTick>
 800190a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800190c:	e008      	b.n	8001920 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800190e:	f7ff f9bb 	bl	8000c88 <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e03d      	b.n	800199c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001920:	4b11      	ldr	r3, [pc, #68]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d0f0      	beq.n	800190e <HAL_RCC_OscConfig+0x46a>
 800192c:	e035      	b.n	800199a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800192e:	4b10      	ldr	r3, [pc, #64]	; (8001970 <HAL_RCC_OscConfig+0x4cc>)
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001934:	f7ff f9a8 	bl	8000c88 <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800193c:	f7ff f9a4 	bl	8000c88 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e026      	b.n	800199c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800194e:	4b06      	ldr	r3, [pc, #24]	; (8001968 <HAL_RCC_OscConfig+0x4c4>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1f0      	bne.n	800193c <HAL_RCC_OscConfig+0x498>
 800195a:	e01e      	b.n	800199a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	69db      	ldr	r3, [r3, #28]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d107      	bne.n	8001974 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e019      	b.n	800199c <HAL_RCC_OscConfig+0x4f8>
 8001968:	40021000 	.word	0x40021000
 800196c:	40007000 	.word	0x40007000
 8001970:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001974:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <HAL_RCC_OscConfig+0x500>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a1b      	ldr	r3, [r3, #32]
 8001984:	429a      	cmp	r2, r3
 8001986:	d106      	bne.n	8001996 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001992:	429a      	cmp	r2, r3
 8001994:	d001      	beq.n	800199a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e000      	b.n	800199c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	3718      	adds	r7, #24
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40021000 	.word	0x40021000

080019a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d101      	bne.n	80019bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e0d0      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019bc:	4b6a      	ldr	r3, [pc, #424]	; (8001b68 <HAL_RCC_ClockConfig+0x1c0>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0307 	and.w	r3, r3, #7
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d910      	bls.n	80019ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ca:	4b67      	ldr	r3, [pc, #412]	; (8001b68 <HAL_RCC_ClockConfig+0x1c0>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f023 0207 	bic.w	r2, r3, #7
 80019d2:	4965      	ldr	r1, [pc, #404]	; (8001b68 <HAL_RCC_ClockConfig+0x1c0>)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019da:	4b63      	ldr	r3, [pc, #396]	; (8001b68 <HAL_RCC_ClockConfig+0x1c0>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d001      	beq.n	80019ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e0b8      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d020      	beq.n	8001a3a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0304 	and.w	r3, r3, #4
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d005      	beq.n	8001a10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a04:	4b59      	ldr	r3, [pc, #356]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	4a58      	ldr	r2, [pc, #352]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a0e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0308 	and.w	r3, r3, #8
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d005      	beq.n	8001a28 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a1c:	4b53      	ldr	r3, [pc, #332]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	4a52      	ldr	r2, [pc, #328]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a22:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a26:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a28:	4b50      	ldr	r3, [pc, #320]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	494d      	ldr	r1, [pc, #308]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d040      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d107      	bne.n	8001a5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a4e:	4b47      	ldr	r3, [pc, #284]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d115      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e07f      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d107      	bne.n	8001a76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a66:	4b41      	ldr	r3, [pc, #260]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d109      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e073      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a76:	4b3d      	ldr	r3, [pc, #244]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e06b      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a86:	4b39      	ldr	r3, [pc, #228]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f023 0203 	bic.w	r2, r3, #3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	4936      	ldr	r1, [pc, #216]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a94:	4313      	orrs	r3, r2
 8001a96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a98:	f7ff f8f6 	bl	8000c88 <HAL_GetTick>
 8001a9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a9e:	e00a      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa0:	f7ff f8f2 	bl	8000c88 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e053      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab6:	4b2d      	ldr	r3, [pc, #180]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f003 020c 	and.w	r2, r3, #12
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d1eb      	bne.n	8001aa0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ac8:	4b27      	ldr	r3, [pc, #156]	; (8001b68 <HAL_RCC_ClockConfig+0x1c0>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0307 	and.w	r3, r3, #7
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d210      	bcs.n	8001af8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad6:	4b24      	ldr	r3, [pc, #144]	; (8001b68 <HAL_RCC_ClockConfig+0x1c0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f023 0207 	bic.w	r2, r3, #7
 8001ade:	4922      	ldr	r1, [pc, #136]	; (8001b68 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae6:	4b20      	ldr	r3, [pc, #128]	; (8001b68 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0307 	and.w	r3, r3, #7
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d001      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e032      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d008      	beq.n	8001b16 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b04:	4b19      	ldr	r3, [pc, #100]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	4916      	ldr	r1, [pc, #88]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0308 	and.w	r3, r3, #8
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d009      	beq.n	8001b36 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b22:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	490e      	ldr	r1, [pc, #56]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b36:	f000 f821 	bl	8001b7c <HAL_RCC_GetSysClockFreq>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	091b      	lsrs	r3, r3, #4
 8001b42:	f003 030f 	and.w	r3, r3, #15
 8001b46:	490a      	ldr	r1, [pc, #40]	; (8001b70 <HAL_RCC_ClockConfig+0x1c8>)
 8001b48:	5ccb      	ldrb	r3, [r1, r3]
 8001b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b4e:	4a09      	ldr	r2, [pc, #36]	; (8001b74 <HAL_RCC_ClockConfig+0x1cc>)
 8001b50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b52:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <HAL_RCC_ClockConfig+0x1d0>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff f854 	bl	8000c04 <HAL_InitTick>

  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40022000 	.word	0x40022000
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	08002fd8 	.word	0x08002fd8
 8001b74:	20000000 	.word	0x20000000
 8001b78:	20000004 	.word	0x20000004

08001b7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b087      	sub	sp, #28
 8001b80:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b82:	2300      	movs	r3, #0
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	2300      	movs	r3, #0
 8001b88:	60bb      	str	r3, [r7, #8]
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	617b      	str	r3, [r7, #20]
 8001b8e:	2300      	movs	r3, #0
 8001b90:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b92:	2300      	movs	r3, #0
 8001b94:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b96:	4b1e      	ldr	r3, [pc, #120]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f003 030c 	and.w	r3, r3, #12
 8001ba2:	2b04      	cmp	r3, #4
 8001ba4:	d002      	beq.n	8001bac <HAL_RCC_GetSysClockFreq+0x30>
 8001ba6:	2b08      	cmp	r3, #8
 8001ba8:	d003      	beq.n	8001bb2 <HAL_RCC_GetSysClockFreq+0x36>
 8001baa:	e027      	b.n	8001bfc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bac:	4b19      	ldr	r3, [pc, #100]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bae:	613b      	str	r3, [r7, #16]
      break;
 8001bb0:	e027      	b.n	8001c02 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	0c9b      	lsrs	r3, r3, #18
 8001bb6:	f003 030f 	and.w	r3, r3, #15
 8001bba:	4a17      	ldr	r2, [pc, #92]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001bbc:	5cd3      	ldrb	r3, [r2, r3]
 8001bbe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d010      	beq.n	8001bec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001bca:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x94>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	0c5b      	lsrs	r3, r3, #17
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	4a11      	ldr	r2, [pc, #68]	; (8001c1c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001bd6:	5cd3      	ldrb	r3, [r2, r3]
 8001bd8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a0d      	ldr	r2, [pc, #52]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bde:	fb03 f202 	mul.w	r2, r3, r2
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be8:	617b      	str	r3, [r7, #20]
 8001bea:	e004      	b.n	8001bf6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a0c      	ldr	r2, [pc, #48]	; (8001c20 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001bf0:	fb02 f303 	mul.w	r3, r2, r3
 8001bf4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	613b      	str	r3, [r7, #16]
      break;
 8001bfa:	e002      	b.n	8001c02 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bfc:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bfe:	613b      	str	r3, [r7, #16]
      break;
 8001c00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c02:	693b      	ldr	r3, [r7, #16]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	371c      	adds	r7, #28
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	40021000 	.word	0x40021000
 8001c14:	007a1200 	.word	0x007a1200
 8001c18:	08002ff0 	.word	0x08002ff0
 8001c1c:	08003000 	.word	0x08003000
 8001c20:	003d0900 	.word	0x003d0900

08001c24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c28:	4b02      	ldr	r3, [pc, #8]	; (8001c34 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr
 8001c34:	20000000 	.word	0x20000000

08001c38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c3c:	f7ff fff2 	bl	8001c24 <HAL_RCC_GetHCLKFreq>
 8001c40:	4602      	mov	r2, r0
 8001c42:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	0a1b      	lsrs	r3, r3, #8
 8001c48:	f003 0307 	and.w	r3, r3, #7
 8001c4c:	4903      	ldr	r1, [pc, #12]	; (8001c5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c4e:	5ccb      	ldrb	r3, [r1, r3]
 8001c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	08002fe8 	.word	0x08002fe8

08001c60 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c68:	4b0a      	ldr	r3, [pc, #40]	; (8001c94 <RCC_Delay+0x34>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a0a      	ldr	r2, [pc, #40]	; (8001c98 <RCC_Delay+0x38>)
 8001c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c72:	0a5b      	lsrs	r3, r3, #9
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	fb02 f303 	mul.w	r3, r2, r3
 8001c7a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c7c:	bf00      	nop
  }
  while (Delay --);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	1e5a      	subs	r2, r3, #1
 8001c82:	60fa      	str	r2, [r7, #12]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1f9      	bne.n	8001c7c <RCC_Delay+0x1c>
}
 8001c88:	bf00      	nop
 8001c8a:	bf00      	nop
 8001c8c:	3714      	adds	r7, #20
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr
 8001c94:	20000000 	.word	0x20000000
 8001c98:	10624dd3 	.word	0x10624dd3

08001c9c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	613b      	str	r3, [r7, #16]
 8001ca8:	2300      	movs	r3, #0
 8001caa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d07d      	beq.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cbc:	4b4f      	ldr	r3, [pc, #316]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cbe:	69db      	ldr	r3, [r3, #28]
 8001cc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d10d      	bne.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cc8:	4b4c      	ldr	r3, [pc, #304]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cca:	69db      	ldr	r3, [r3, #28]
 8001ccc:	4a4b      	ldr	r2, [pc, #300]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd2:	61d3      	str	r3, [r2, #28]
 8001cd4:	4b49      	ldr	r3, [pc, #292]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cd6:	69db      	ldr	r3, [r3, #28]
 8001cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cdc:	60bb      	str	r3, [r7, #8]
 8001cde:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce4:	4b46      	ldr	r3, [pc, #280]	; (8001e00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d118      	bne.n	8001d22 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cf0:	4b43      	ldr	r3, [pc, #268]	; (8001e00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a42      	ldr	r2, [pc, #264]	; (8001e00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cfa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cfc:	f7fe ffc4 	bl	8000c88 <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d02:	e008      	b.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d04:	f7fe ffc0 	bl	8000c88 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b64      	cmp	r3, #100	; 0x64
 8001d10:	d901      	bls.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e06d      	b.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d16:	4b3a      	ldr	r3, [pc, #232]	; (8001e00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d0f0      	beq.n	8001d04 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d22:	4b36      	ldr	r3, [pc, #216]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d24:	6a1b      	ldr	r3, [r3, #32]
 8001d26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d2a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d02e      	beq.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d027      	beq.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d40:	4b2e      	ldr	r3, [pc, #184]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d42:	6a1b      	ldr	r3, [r3, #32]
 8001d44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d48:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d4a:	4b2e      	ldr	r3, [pc, #184]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d50:	4b2c      	ldr	r3, [pc, #176]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001d56:	4a29      	ldr	r2, [pc, #164]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d014      	beq.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d66:	f7fe ff8f 	bl	8000c88 <HAL_GetTick>
 8001d6a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d6c:	e00a      	b.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d6e:	f7fe ff8b 	bl	8000c88 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e036      	b.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d84:	4b1d      	ldr	r3, [pc, #116]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d86:	6a1b      	ldr	r3, [r3, #32]
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0ee      	beq.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d90:	4b1a      	ldr	r3, [pc, #104]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d92:	6a1b      	ldr	r3, [r3, #32]
 8001d94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	4917      	ldr	r1, [pc, #92]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001da2:	7dfb      	ldrb	r3, [r7, #23]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d105      	bne.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001da8:	4b14      	ldr	r3, [pc, #80]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001daa:	69db      	ldr	r3, [r3, #28]
 8001dac:	4a13      	ldr	r2, [pc, #76]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001db2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d008      	beq.n	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001dc0:	4b0e      	ldr	r3, [pc, #56]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	490b      	ldr	r1, [pc, #44]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0310 	and.w	r3, r3, #16
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d008      	beq.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001dde:	4b07      	ldr	r3, [pc, #28]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	4904      	ldr	r1, [pc, #16]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3718      	adds	r7, #24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	40007000 	.word	0x40007000
 8001e04:	42420440 	.word	0x42420440

08001e08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e076      	b.n	8001f08 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d108      	bne.n	8001e34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e2a:	d009      	beq.n	8001e40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	61da      	str	r2, [r3, #28]
 8001e32:	e005      	b.n	8001e40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d106      	bne.n	8001e60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7fe fd9c 	bl	8000998 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2202      	movs	r2, #2
 8001e64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e76:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e92:	431a      	orrs	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a1b      	ldr	r3, [r3, #32]
 8001ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec4:	ea42 0103 	orr.w	r1, r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ecc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	0c1a      	lsrs	r2, r3, #16
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f002 0204 	and.w	r2, r2, #4
 8001ee6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	69da      	ldr	r2, [r3, #28]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ef6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <std>:
 8001f10:	2300      	movs	r3, #0
 8001f12:	b510      	push	{r4, lr}
 8001f14:	4604      	mov	r4, r0
 8001f16:	e9c0 3300 	strd	r3, r3, [r0]
 8001f1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001f1e:	6083      	str	r3, [r0, #8]
 8001f20:	8181      	strh	r1, [r0, #12]
 8001f22:	6643      	str	r3, [r0, #100]	; 0x64
 8001f24:	81c2      	strh	r2, [r0, #14]
 8001f26:	6183      	str	r3, [r0, #24]
 8001f28:	4619      	mov	r1, r3
 8001f2a:	2208      	movs	r2, #8
 8001f2c:	305c      	adds	r0, #92	; 0x5c
 8001f2e:	f000 f9e5 	bl	80022fc <memset>
 8001f32:	4b05      	ldr	r3, [pc, #20]	; (8001f48 <std+0x38>)
 8001f34:	6224      	str	r4, [r4, #32]
 8001f36:	6263      	str	r3, [r4, #36]	; 0x24
 8001f38:	4b04      	ldr	r3, [pc, #16]	; (8001f4c <std+0x3c>)
 8001f3a:	62a3      	str	r3, [r4, #40]	; 0x28
 8001f3c:	4b04      	ldr	r3, [pc, #16]	; (8001f50 <std+0x40>)
 8001f3e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001f40:	4b04      	ldr	r3, [pc, #16]	; (8001f54 <std+0x44>)
 8001f42:	6323      	str	r3, [r4, #48]	; 0x30
 8001f44:	bd10      	pop	{r4, pc}
 8001f46:	bf00      	nop
 8001f48:	0800214d 	.word	0x0800214d
 8001f4c:	0800216f 	.word	0x0800216f
 8001f50:	080021a7 	.word	0x080021a7
 8001f54:	080021cb 	.word	0x080021cb

08001f58 <stdio_exit_handler>:
 8001f58:	4a02      	ldr	r2, [pc, #8]	; (8001f64 <stdio_exit_handler+0xc>)
 8001f5a:	4903      	ldr	r1, [pc, #12]	; (8001f68 <stdio_exit_handler+0x10>)
 8001f5c:	4803      	ldr	r0, [pc, #12]	; (8001f6c <stdio_exit_handler+0x14>)
 8001f5e:	f000 b869 	b.w	8002034 <_fwalk_sglue>
 8001f62:	bf00      	nop
 8001f64:	2000000c 	.word	0x2000000c
 8001f68:	08002c89 	.word	0x08002c89
 8001f6c:	20000018 	.word	0x20000018

08001f70 <cleanup_stdio>:
 8001f70:	6841      	ldr	r1, [r0, #4]
 8001f72:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <cleanup_stdio+0x34>)
 8001f74:	b510      	push	{r4, lr}
 8001f76:	4299      	cmp	r1, r3
 8001f78:	4604      	mov	r4, r0
 8001f7a:	d001      	beq.n	8001f80 <cleanup_stdio+0x10>
 8001f7c:	f000 fe84 	bl	8002c88 <_fflush_r>
 8001f80:	68a1      	ldr	r1, [r4, #8]
 8001f82:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <cleanup_stdio+0x38>)
 8001f84:	4299      	cmp	r1, r3
 8001f86:	d002      	beq.n	8001f8e <cleanup_stdio+0x1e>
 8001f88:	4620      	mov	r0, r4
 8001f8a:	f000 fe7d 	bl	8002c88 <_fflush_r>
 8001f8e:	68e1      	ldr	r1, [r4, #12]
 8001f90:	4b06      	ldr	r3, [pc, #24]	; (8001fac <cleanup_stdio+0x3c>)
 8001f92:	4299      	cmp	r1, r3
 8001f94:	d004      	beq.n	8001fa0 <cleanup_stdio+0x30>
 8001f96:	4620      	mov	r0, r4
 8001f98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f9c:	f000 be74 	b.w	8002c88 <_fflush_r>
 8001fa0:	bd10      	pop	{r4, pc}
 8001fa2:	bf00      	nop
 8001fa4:	20000138 	.word	0x20000138
 8001fa8:	200001a0 	.word	0x200001a0
 8001fac:	20000208 	.word	0x20000208

08001fb0 <global_stdio_init.part.0>:
 8001fb0:	b510      	push	{r4, lr}
 8001fb2:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <global_stdio_init.part.0+0x30>)
 8001fb4:	4c0b      	ldr	r4, [pc, #44]	; (8001fe4 <global_stdio_init.part.0+0x34>)
 8001fb6:	4a0c      	ldr	r2, [pc, #48]	; (8001fe8 <global_stdio_init.part.0+0x38>)
 8001fb8:	4620      	mov	r0, r4
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	2104      	movs	r1, #4
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f7ff ffa6 	bl	8001f10 <std>
 8001fc4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8001fc8:	2201      	movs	r2, #1
 8001fca:	2109      	movs	r1, #9
 8001fcc:	f7ff ffa0 	bl	8001f10 <std>
 8001fd0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001fda:	2112      	movs	r1, #18
 8001fdc:	f7ff bf98 	b.w	8001f10 <std>
 8001fe0:	20000270 	.word	0x20000270
 8001fe4:	20000138 	.word	0x20000138
 8001fe8:	08001f59 	.word	0x08001f59

08001fec <__sfp_lock_acquire>:
 8001fec:	4801      	ldr	r0, [pc, #4]	; (8001ff4 <__sfp_lock_acquire+0x8>)
 8001fee:	f000 b9fd 	b.w	80023ec <__retarget_lock_acquire_recursive>
 8001ff2:	bf00      	nop
 8001ff4:	20000279 	.word	0x20000279

08001ff8 <__sfp_lock_release>:
 8001ff8:	4801      	ldr	r0, [pc, #4]	; (8002000 <__sfp_lock_release+0x8>)
 8001ffa:	f000 b9f8 	b.w	80023ee <__retarget_lock_release_recursive>
 8001ffe:	bf00      	nop
 8002000:	20000279 	.word	0x20000279

08002004 <__sinit>:
 8002004:	b510      	push	{r4, lr}
 8002006:	4604      	mov	r4, r0
 8002008:	f7ff fff0 	bl	8001fec <__sfp_lock_acquire>
 800200c:	6a23      	ldr	r3, [r4, #32]
 800200e:	b11b      	cbz	r3, 8002018 <__sinit+0x14>
 8002010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002014:	f7ff bff0 	b.w	8001ff8 <__sfp_lock_release>
 8002018:	4b04      	ldr	r3, [pc, #16]	; (800202c <__sinit+0x28>)
 800201a:	6223      	str	r3, [r4, #32]
 800201c:	4b04      	ldr	r3, [pc, #16]	; (8002030 <__sinit+0x2c>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1f5      	bne.n	8002010 <__sinit+0xc>
 8002024:	f7ff ffc4 	bl	8001fb0 <global_stdio_init.part.0>
 8002028:	e7f2      	b.n	8002010 <__sinit+0xc>
 800202a:	bf00      	nop
 800202c:	08001f71 	.word	0x08001f71
 8002030:	20000270 	.word	0x20000270

08002034 <_fwalk_sglue>:
 8002034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002038:	4607      	mov	r7, r0
 800203a:	4688      	mov	r8, r1
 800203c:	4614      	mov	r4, r2
 800203e:	2600      	movs	r6, #0
 8002040:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002044:	f1b9 0901 	subs.w	r9, r9, #1
 8002048:	d505      	bpl.n	8002056 <_fwalk_sglue+0x22>
 800204a:	6824      	ldr	r4, [r4, #0]
 800204c:	2c00      	cmp	r4, #0
 800204e:	d1f7      	bne.n	8002040 <_fwalk_sglue+0xc>
 8002050:	4630      	mov	r0, r6
 8002052:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002056:	89ab      	ldrh	r3, [r5, #12]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d907      	bls.n	800206c <_fwalk_sglue+0x38>
 800205c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002060:	3301      	adds	r3, #1
 8002062:	d003      	beq.n	800206c <_fwalk_sglue+0x38>
 8002064:	4629      	mov	r1, r5
 8002066:	4638      	mov	r0, r7
 8002068:	47c0      	blx	r8
 800206a:	4306      	orrs	r6, r0
 800206c:	3568      	adds	r5, #104	; 0x68
 800206e:	e7e9      	b.n	8002044 <_fwalk_sglue+0x10>

08002070 <iprintf>:
 8002070:	b40f      	push	{r0, r1, r2, r3}
 8002072:	b507      	push	{r0, r1, r2, lr}
 8002074:	4906      	ldr	r1, [pc, #24]	; (8002090 <iprintf+0x20>)
 8002076:	ab04      	add	r3, sp, #16
 8002078:	6808      	ldr	r0, [r1, #0]
 800207a:	f853 2b04 	ldr.w	r2, [r3], #4
 800207e:	6881      	ldr	r1, [r0, #8]
 8002080:	9301      	str	r3, [sp, #4]
 8002082:	f000 fad1 	bl	8002628 <_vfiprintf_r>
 8002086:	b003      	add	sp, #12
 8002088:	f85d eb04 	ldr.w	lr, [sp], #4
 800208c:	b004      	add	sp, #16
 800208e:	4770      	bx	lr
 8002090:	20000064 	.word	0x20000064

08002094 <_puts_r>:
 8002094:	6a03      	ldr	r3, [r0, #32]
 8002096:	b570      	push	{r4, r5, r6, lr}
 8002098:	4605      	mov	r5, r0
 800209a:	460e      	mov	r6, r1
 800209c:	6884      	ldr	r4, [r0, #8]
 800209e:	b90b      	cbnz	r3, 80020a4 <_puts_r+0x10>
 80020a0:	f7ff ffb0 	bl	8002004 <__sinit>
 80020a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80020a6:	07db      	lsls	r3, r3, #31
 80020a8:	d405      	bmi.n	80020b6 <_puts_r+0x22>
 80020aa:	89a3      	ldrh	r3, [r4, #12]
 80020ac:	0598      	lsls	r0, r3, #22
 80020ae:	d402      	bmi.n	80020b6 <_puts_r+0x22>
 80020b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80020b2:	f000 f99b 	bl	80023ec <__retarget_lock_acquire_recursive>
 80020b6:	89a3      	ldrh	r3, [r4, #12]
 80020b8:	0719      	lsls	r1, r3, #28
 80020ba:	d513      	bpl.n	80020e4 <_puts_r+0x50>
 80020bc:	6923      	ldr	r3, [r4, #16]
 80020be:	b18b      	cbz	r3, 80020e4 <_puts_r+0x50>
 80020c0:	3e01      	subs	r6, #1
 80020c2:	68a3      	ldr	r3, [r4, #8]
 80020c4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80020c8:	3b01      	subs	r3, #1
 80020ca:	60a3      	str	r3, [r4, #8]
 80020cc:	b9e9      	cbnz	r1, 800210a <_puts_r+0x76>
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	da2e      	bge.n	8002130 <_puts_r+0x9c>
 80020d2:	4622      	mov	r2, r4
 80020d4:	210a      	movs	r1, #10
 80020d6:	4628      	mov	r0, r5
 80020d8:	f000 f87b 	bl	80021d2 <__swbuf_r>
 80020dc:	3001      	adds	r0, #1
 80020de:	d007      	beq.n	80020f0 <_puts_r+0x5c>
 80020e0:	250a      	movs	r5, #10
 80020e2:	e007      	b.n	80020f4 <_puts_r+0x60>
 80020e4:	4621      	mov	r1, r4
 80020e6:	4628      	mov	r0, r5
 80020e8:	f000 f8b0 	bl	800224c <__swsetup_r>
 80020ec:	2800      	cmp	r0, #0
 80020ee:	d0e7      	beq.n	80020c0 <_puts_r+0x2c>
 80020f0:	f04f 35ff 	mov.w	r5, #4294967295
 80020f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80020f6:	07da      	lsls	r2, r3, #31
 80020f8:	d405      	bmi.n	8002106 <_puts_r+0x72>
 80020fa:	89a3      	ldrh	r3, [r4, #12]
 80020fc:	059b      	lsls	r3, r3, #22
 80020fe:	d402      	bmi.n	8002106 <_puts_r+0x72>
 8002100:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002102:	f000 f974 	bl	80023ee <__retarget_lock_release_recursive>
 8002106:	4628      	mov	r0, r5
 8002108:	bd70      	pop	{r4, r5, r6, pc}
 800210a:	2b00      	cmp	r3, #0
 800210c:	da04      	bge.n	8002118 <_puts_r+0x84>
 800210e:	69a2      	ldr	r2, [r4, #24]
 8002110:	429a      	cmp	r2, r3
 8002112:	dc06      	bgt.n	8002122 <_puts_r+0x8e>
 8002114:	290a      	cmp	r1, #10
 8002116:	d004      	beq.n	8002122 <_puts_r+0x8e>
 8002118:	6823      	ldr	r3, [r4, #0]
 800211a:	1c5a      	adds	r2, r3, #1
 800211c:	6022      	str	r2, [r4, #0]
 800211e:	7019      	strb	r1, [r3, #0]
 8002120:	e7cf      	b.n	80020c2 <_puts_r+0x2e>
 8002122:	4622      	mov	r2, r4
 8002124:	4628      	mov	r0, r5
 8002126:	f000 f854 	bl	80021d2 <__swbuf_r>
 800212a:	3001      	adds	r0, #1
 800212c:	d1c9      	bne.n	80020c2 <_puts_r+0x2e>
 800212e:	e7df      	b.n	80020f0 <_puts_r+0x5c>
 8002130:	250a      	movs	r5, #10
 8002132:	6823      	ldr	r3, [r4, #0]
 8002134:	1c5a      	adds	r2, r3, #1
 8002136:	6022      	str	r2, [r4, #0]
 8002138:	701d      	strb	r5, [r3, #0]
 800213a:	e7db      	b.n	80020f4 <_puts_r+0x60>

0800213c <puts>:
 800213c:	4b02      	ldr	r3, [pc, #8]	; (8002148 <puts+0xc>)
 800213e:	4601      	mov	r1, r0
 8002140:	6818      	ldr	r0, [r3, #0]
 8002142:	f7ff bfa7 	b.w	8002094 <_puts_r>
 8002146:	bf00      	nop
 8002148:	20000064 	.word	0x20000064

0800214c <__sread>:
 800214c:	b510      	push	{r4, lr}
 800214e:	460c      	mov	r4, r1
 8002150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002154:	f000 f8fc 	bl	8002350 <_read_r>
 8002158:	2800      	cmp	r0, #0
 800215a:	bfab      	itete	ge
 800215c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800215e:	89a3      	ldrhlt	r3, [r4, #12]
 8002160:	181b      	addge	r3, r3, r0
 8002162:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002166:	bfac      	ite	ge
 8002168:	6563      	strge	r3, [r4, #84]	; 0x54
 800216a:	81a3      	strhlt	r3, [r4, #12]
 800216c:	bd10      	pop	{r4, pc}

0800216e <__swrite>:
 800216e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002172:	461f      	mov	r7, r3
 8002174:	898b      	ldrh	r3, [r1, #12]
 8002176:	4605      	mov	r5, r0
 8002178:	05db      	lsls	r3, r3, #23
 800217a:	460c      	mov	r4, r1
 800217c:	4616      	mov	r6, r2
 800217e:	d505      	bpl.n	800218c <__swrite+0x1e>
 8002180:	2302      	movs	r3, #2
 8002182:	2200      	movs	r2, #0
 8002184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002188:	f000 f8d0 	bl	800232c <_lseek_r>
 800218c:	89a3      	ldrh	r3, [r4, #12]
 800218e:	4632      	mov	r2, r6
 8002190:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002194:	81a3      	strh	r3, [r4, #12]
 8002196:	4628      	mov	r0, r5
 8002198:	463b      	mov	r3, r7
 800219a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800219e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80021a2:	f000 b8e7 	b.w	8002374 <_write_r>

080021a6 <__sseek>:
 80021a6:	b510      	push	{r4, lr}
 80021a8:	460c      	mov	r4, r1
 80021aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021ae:	f000 f8bd 	bl	800232c <_lseek_r>
 80021b2:	1c43      	adds	r3, r0, #1
 80021b4:	89a3      	ldrh	r3, [r4, #12]
 80021b6:	bf15      	itete	ne
 80021b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80021ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80021be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80021c2:	81a3      	strheq	r3, [r4, #12]
 80021c4:	bf18      	it	ne
 80021c6:	81a3      	strhne	r3, [r4, #12]
 80021c8:	bd10      	pop	{r4, pc}

080021ca <__sclose>:
 80021ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021ce:	f000 b89d 	b.w	800230c <_close_r>

080021d2 <__swbuf_r>:
 80021d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021d4:	460e      	mov	r6, r1
 80021d6:	4614      	mov	r4, r2
 80021d8:	4605      	mov	r5, r0
 80021da:	b118      	cbz	r0, 80021e4 <__swbuf_r+0x12>
 80021dc:	6a03      	ldr	r3, [r0, #32]
 80021de:	b90b      	cbnz	r3, 80021e4 <__swbuf_r+0x12>
 80021e0:	f7ff ff10 	bl	8002004 <__sinit>
 80021e4:	69a3      	ldr	r3, [r4, #24]
 80021e6:	60a3      	str	r3, [r4, #8]
 80021e8:	89a3      	ldrh	r3, [r4, #12]
 80021ea:	071a      	lsls	r2, r3, #28
 80021ec:	d525      	bpl.n	800223a <__swbuf_r+0x68>
 80021ee:	6923      	ldr	r3, [r4, #16]
 80021f0:	b31b      	cbz	r3, 800223a <__swbuf_r+0x68>
 80021f2:	6823      	ldr	r3, [r4, #0]
 80021f4:	6922      	ldr	r2, [r4, #16]
 80021f6:	b2f6      	uxtb	r6, r6
 80021f8:	1a98      	subs	r0, r3, r2
 80021fa:	6963      	ldr	r3, [r4, #20]
 80021fc:	4637      	mov	r7, r6
 80021fe:	4283      	cmp	r3, r0
 8002200:	dc04      	bgt.n	800220c <__swbuf_r+0x3a>
 8002202:	4621      	mov	r1, r4
 8002204:	4628      	mov	r0, r5
 8002206:	f000 fd3f 	bl	8002c88 <_fflush_r>
 800220a:	b9e0      	cbnz	r0, 8002246 <__swbuf_r+0x74>
 800220c:	68a3      	ldr	r3, [r4, #8]
 800220e:	3b01      	subs	r3, #1
 8002210:	60a3      	str	r3, [r4, #8]
 8002212:	6823      	ldr	r3, [r4, #0]
 8002214:	1c5a      	adds	r2, r3, #1
 8002216:	6022      	str	r2, [r4, #0]
 8002218:	701e      	strb	r6, [r3, #0]
 800221a:	6962      	ldr	r2, [r4, #20]
 800221c:	1c43      	adds	r3, r0, #1
 800221e:	429a      	cmp	r2, r3
 8002220:	d004      	beq.n	800222c <__swbuf_r+0x5a>
 8002222:	89a3      	ldrh	r3, [r4, #12]
 8002224:	07db      	lsls	r3, r3, #31
 8002226:	d506      	bpl.n	8002236 <__swbuf_r+0x64>
 8002228:	2e0a      	cmp	r6, #10
 800222a:	d104      	bne.n	8002236 <__swbuf_r+0x64>
 800222c:	4621      	mov	r1, r4
 800222e:	4628      	mov	r0, r5
 8002230:	f000 fd2a 	bl	8002c88 <_fflush_r>
 8002234:	b938      	cbnz	r0, 8002246 <__swbuf_r+0x74>
 8002236:	4638      	mov	r0, r7
 8002238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800223a:	4621      	mov	r1, r4
 800223c:	4628      	mov	r0, r5
 800223e:	f000 f805 	bl	800224c <__swsetup_r>
 8002242:	2800      	cmp	r0, #0
 8002244:	d0d5      	beq.n	80021f2 <__swbuf_r+0x20>
 8002246:	f04f 37ff 	mov.w	r7, #4294967295
 800224a:	e7f4      	b.n	8002236 <__swbuf_r+0x64>

0800224c <__swsetup_r>:
 800224c:	b538      	push	{r3, r4, r5, lr}
 800224e:	4b2a      	ldr	r3, [pc, #168]	; (80022f8 <__swsetup_r+0xac>)
 8002250:	4605      	mov	r5, r0
 8002252:	6818      	ldr	r0, [r3, #0]
 8002254:	460c      	mov	r4, r1
 8002256:	b118      	cbz	r0, 8002260 <__swsetup_r+0x14>
 8002258:	6a03      	ldr	r3, [r0, #32]
 800225a:	b90b      	cbnz	r3, 8002260 <__swsetup_r+0x14>
 800225c:	f7ff fed2 	bl	8002004 <__sinit>
 8002260:	89a3      	ldrh	r3, [r4, #12]
 8002262:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002266:	0718      	lsls	r0, r3, #28
 8002268:	d422      	bmi.n	80022b0 <__swsetup_r+0x64>
 800226a:	06d9      	lsls	r1, r3, #27
 800226c:	d407      	bmi.n	800227e <__swsetup_r+0x32>
 800226e:	2309      	movs	r3, #9
 8002270:	602b      	str	r3, [r5, #0]
 8002272:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002276:	f04f 30ff 	mov.w	r0, #4294967295
 800227a:	81a3      	strh	r3, [r4, #12]
 800227c:	e034      	b.n	80022e8 <__swsetup_r+0x9c>
 800227e:	0758      	lsls	r0, r3, #29
 8002280:	d512      	bpl.n	80022a8 <__swsetup_r+0x5c>
 8002282:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002284:	b141      	cbz	r1, 8002298 <__swsetup_r+0x4c>
 8002286:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800228a:	4299      	cmp	r1, r3
 800228c:	d002      	beq.n	8002294 <__swsetup_r+0x48>
 800228e:	4628      	mov	r0, r5
 8002290:	f000 f8ae 	bl	80023f0 <_free_r>
 8002294:	2300      	movs	r3, #0
 8002296:	6363      	str	r3, [r4, #52]	; 0x34
 8002298:	89a3      	ldrh	r3, [r4, #12]
 800229a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800229e:	81a3      	strh	r3, [r4, #12]
 80022a0:	2300      	movs	r3, #0
 80022a2:	6063      	str	r3, [r4, #4]
 80022a4:	6923      	ldr	r3, [r4, #16]
 80022a6:	6023      	str	r3, [r4, #0]
 80022a8:	89a3      	ldrh	r3, [r4, #12]
 80022aa:	f043 0308 	orr.w	r3, r3, #8
 80022ae:	81a3      	strh	r3, [r4, #12]
 80022b0:	6923      	ldr	r3, [r4, #16]
 80022b2:	b94b      	cbnz	r3, 80022c8 <__swsetup_r+0x7c>
 80022b4:	89a3      	ldrh	r3, [r4, #12]
 80022b6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80022ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022be:	d003      	beq.n	80022c8 <__swsetup_r+0x7c>
 80022c0:	4621      	mov	r1, r4
 80022c2:	4628      	mov	r0, r5
 80022c4:	f000 fd2d 	bl	8002d22 <__smakebuf_r>
 80022c8:	89a0      	ldrh	r0, [r4, #12]
 80022ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80022ce:	f010 0301 	ands.w	r3, r0, #1
 80022d2:	d00a      	beq.n	80022ea <__swsetup_r+0x9e>
 80022d4:	2300      	movs	r3, #0
 80022d6:	60a3      	str	r3, [r4, #8]
 80022d8:	6963      	ldr	r3, [r4, #20]
 80022da:	425b      	negs	r3, r3
 80022dc:	61a3      	str	r3, [r4, #24]
 80022de:	6923      	ldr	r3, [r4, #16]
 80022e0:	b943      	cbnz	r3, 80022f4 <__swsetup_r+0xa8>
 80022e2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80022e6:	d1c4      	bne.n	8002272 <__swsetup_r+0x26>
 80022e8:	bd38      	pop	{r3, r4, r5, pc}
 80022ea:	0781      	lsls	r1, r0, #30
 80022ec:	bf58      	it	pl
 80022ee:	6963      	ldrpl	r3, [r4, #20]
 80022f0:	60a3      	str	r3, [r4, #8]
 80022f2:	e7f4      	b.n	80022de <__swsetup_r+0x92>
 80022f4:	2000      	movs	r0, #0
 80022f6:	e7f7      	b.n	80022e8 <__swsetup_r+0x9c>
 80022f8:	20000064 	.word	0x20000064

080022fc <memset>:
 80022fc:	4603      	mov	r3, r0
 80022fe:	4402      	add	r2, r0
 8002300:	4293      	cmp	r3, r2
 8002302:	d100      	bne.n	8002306 <memset+0xa>
 8002304:	4770      	bx	lr
 8002306:	f803 1b01 	strb.w	r1, [r3], #1
 800230a:	e7f9      	b.n	8002300 <memset+0x4>

0800230c <_close_r>:
 800230c:	b538      	push	{r3, r4, r5, lr}
 800230e:	2300      	movs	r3, #0
 8002310:	4d05      	ldr	r5, [pc, #20]	; (8002328 <_close_r+0x1c>)
 8002312:	4604      	mov	r4, r0
 8002314:	4608      	mov	r0, r1
 8002316:	602b      	str	r3, [r5, #0]
 8002318:	f7fe fbcc 	bl	8000ab4 <_close>
 800231c:	1c43      	adds	r3, r0, #1
 800231e:	d102      	bne.n	8002326 <_close_r+0x1a>
 8002320:	682b      	ldr	r3, [r5, #0]
 8002322:	b103      	cbz	r3, 8002326 <_close_r+0x1a>
 8002324:	6023      	str	r3, [r4, #0]
 8002326:	bd38      	pop	{r3, r4, r5, pc}
 8002328:	20000274 	.word	0x20000274

0800232c <_lseek_r>:
 800232c:	b538      	push	{r3, r4, r5, lr}
 800232e:	4604      	mov	r4, r0
 8002330:	4608      	mov	r0, r1
 8002332:	4611      	mov	r1, r2
 8002334:	2200      	movs	r2, #0
 8002336:	4d05      	ldr	r5, [pc, #20]	; (800234c <_lseek_r+0x20>)
 8002338:	602a      	str	r2, [r5, #0]
 800233a:	461a      	mov	r2, r3
 800233c:	f7fe fbde 	bl	8000afc <_lseek>
 8002340:	1c43      	adds	r3, r0, #1
 8002342:	d102      	bne.n	800234a <_lseek_r+0x1e>
 8002344:	682b      	ldr	r3, [r5, #0]
 8002346:	b103      	cbz	r3, 800234a <_lseek_r+0x1e>
 8002348:	6023      	str	r3, [r4, #0]
 800234a:	bd38      	pop	{r3, r4, r5, pc}
 800234c:	20000274 	.word	0x20000274

08002350 <_read_r>:
 8002350:	b538      	push	{r3, r4, r5, lr}
 8002352:	4604      	mov	r4, r0
 8002354:	4608      	mov	r0, r1
 8002356:	4611      	mov	r1, r2
 8002358:	2200      	movs	r2, #0
 800235a:	4d05      	ldr	r5, [pc, #20]	; (8002370 <_read_r+0x20>)
 800235c:	602a      	str	r2, [r5, #0]
 800235e:	461a      	mov	r2, r3
 8002360:	f7fe fb8b 	bl	8000a7a <_read>
 8002364:	1c43      	adds	r3, r0, #1
 8002366:	d102      	bne.n	800236e <_read_r+0x1e>
 8002368:	682b      	ldr	r3, [r5, #0]
 800236a:	b103      	cbz	r3, 800236e <_read_r+0x1e>
 800236c:	6023      	str	r3, [r4, #0]
 800236e:	bd38      	pop	{r3, r4, r5, pc}
 8002370:	20000274 	.word	0x20000274

08002374 <_write_r>:
 8002374:	b538      	push	{r3, r4, r5, lr}
 8002376:	4604      	mov	r4, r0
 8002378:	4608      	mov	r0, r1
 800237a:	4611      	mov	r1, r2
 800237c:	2200      	movs	r2, #0
 800237e:	4d05      	ldr	r5, [pc, #20]	; (8002394 <_write_r+0x20>)
 8002380:	602a      	str	r2, [r5, #0]
 8002382:	461a      	mov	r2, r3
 8002384:	f7fd ff08 	bl	8000198 <_write>
 8002388:	1c43      	adds	r3, r0, #1
 800238a:	d102      	bne.n	8002392 <_write_r+0x1e>
 800238c:	682b      	ldr	r3, [r5, #0]
 800238e:	b103      	cbz	r3, 8002392 <_write_r+0x1e>
 8002390:	6023      	str	r3, [r4, #0]
 8002392:	bd38      	pop	{r3, r4, r5, pc}
 8002394:	20000274 	.word	0x20000274

08002398 <__errno>:
 8002398:	4b01      	ldr	r3, [pc, #4]	; (80023a0 <__errno+0x8>)
 800239a:	6818      	ldr	r0, [r3, #0]
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	20000064 	.word	0x20000064

080023a4 <__libc_init_array>:
 80023a4:	b570      	push	{r4, r5, r6, lr}
 80023a6:	2600      	movs	r6, #0
 80023a8:	4d0c      	ldr	r5, [pc, #48]	; (80023dc <__libc_init_array+0x38>)
 80023aa:	4c0d      	ldr	r4, [pc, #52]	; (80023e0 <__libc_init_array+0x3c>)
 80023ac:	1b64      	subs	r4, r4, r5
 80023ae:	10a4      	asrs	r4, r4, #2
 80023b0:	42a6      	cmp	r6, r4
 80023b2:	d109      	bne.n	80023c8 <__libc_init_array+0x24>
 80023b4:	f000 fd32 	bl	8002e1c <_init>
 80023b8:	2600      	movs	r6, #0
 80023ba:	4d0a      	ldr	r5, [pc, #40]	; (80023e4 <__libc_init_array+0x40>)
 80023bc:	4c0a      	ldr	r4, [pc, #40]	; (80023e8 <__libc_init_array+0x44>)
 80023be:	1b64      	subs	r4, r4, r5
 80023c0:	10a4      	asrs	r4, r4, #2
 80023c2:	42a6      	cmp	r6, r4
 80023c4:	d105      	bne.n	80023d2 <__libc_init_array+0x2e>
 80023c6:	bd70      	pop	{r4, r5, r6, pc}
 80023c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80023cc:	4798      	blx	r3
 80023ce:	3601      	adds	r6, #1
 80023d0:	e7ee      	b.n	80023b0 <__libc_init_array+0xc>
 80023d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80023d6:	4798      	blx	r3
 80023d8:	3601      	adds	r6, #1
 80023da:	e7f2      	b.n	80023c2 <__libc_init_array+0x1e>
 80023dc:	08003038 	.word	0x08003038
 80023e0:	08003038 	.word	0x08003038
 80023e4:	08003038 	.word	0x08003038
 80023e8:	0800303c 	.word	0x0800303c

080023ec <__retarget_lock_acquire_recursive>:
 80023ec:	4770      	bx	lr

080023ee <__retarget_lock_release_recursive>:
 80023ee:	4770      	bx	lr

080023f0 <_free_r>:
 80023f0:	b538      	push	{r3, r4, r5, lr}
 80023f2:	4605      	mov	r5, r0
 80023f4:	2900      	cmp	r1, #0
 80023f6:	d040      	beq.n	800247a <_free_r+0x8a>
 80023f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80023fc:	1f0c      	subs	r4, r1, #4
 80023fe:	2b00      	cmp	r3, #0
 8002400:	bfb8      	it	lt
 8002402:	18e4      	addlt	r4, r4, r3
 8002404:	f000 f8dc 	bl	80025c0 <__malloc_lock>
 8002408:	4a1c      	ldr	r2, [pc, #112]	; (800247c <_free_r+0x8c>)
 800240a:	6813      	ldr	r3, [r2, #0]
 800240c:	b933      	cbnz	r3, 800241c <_free_r+0x2c>
 800240e:	6063      	str	r3, [r4, #4]
 8002410:	6014      	str	r4, [r2, #0]
 8002412:	4628      	mov	r0, r5
 8002414:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002418:	f000 b8d8 	b.w	80025cc <__malloc_unlock>
 800241c:	42a3      	cmp	r3, r4
 800241e:	d908      	bls.n	8002432 <_free_r+0x42>
 8002420:	6820      	ldr	r0, [r4, #0]
 8002422:	1821      	adds	r1, r4, r0
 8002424:	428b      	cmp	r3, r1
 8002426:	bf01      	itttt	eq
 8002428:	6819      	ldreq	r1, [r3, #0]
 800242a:	685b      	ldreq	r3, [r3, #4]
 800242c:	1809      	addeq	r1, r1, r0
 800242e:	6021      	streq	r1, [r4, #0]
 8002430:	e7ed      	b.n	800240e <_free_r+0x1e>
 8002432:	461a      	mov	r2, r3
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	b10b      	cbz	r3, 800243c <_free_r+0x4c>
 8002438:	42a3      	cmp	r3, r4
 800243a:	d9fa      	bls.n	8002432 <_free_r+0x42>
 800243c:	6811      	ldr	r1, [r2, #0]
 800243e:	1850      	adds	r0, r2, r1
 8002440:	42a0      	cmp	r0, r4
 8002442:	d10b      	bne.n	800245c <_free_r+0x6c>
 8002444:	6820      	ldr	r0, [r4, #0]
 8002446:	4401      	add	r1, r0
 8002448:	1850      	adds	r0, r2, r1
 800244a:	4283      	cmp	r3, r0
 800244c:	6011      	str	r1, [r2, #0]
 800244e:	d1e0      	bne.n	8002412 <_free_r+0x22>
 8002450:	6818      	ldr	r0, [r3, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	4408      	add	r0, r1
 8002456:	6010      	str	r0, [r2, #0]
 8002458:	6053      	str	r3, [r2, #4]
 800245a:	e7da      	b.n	8002412 <_free_r+0x22>
 800245c:	d902      	bls.n	8002464 <_free_r+0x74>
 800245e:	230c      	movs	r3, #12
 8002460:	602b      	str	r3, [r5, #0]
 8002462:	e7d6      	b.n	8002412 <_free_r+0x22>
 8002464:	6820      	ldr	r0, [r4, #0]
 8002466:	1821      	adds	r1, r4, r0
 8002468:	428b      	cmp	r3, r1
 800246a:	bf01      	itttt	eq
 800246c:	6819      	ldreq	r1, [r3, #0]
 800246e:	685b      	ldreq	r3, [r3, #4]
 8002470:	1809      	addeq	r1, r1, r0
 8002472:	6021      	streq	r1, [r4, #0]
 8002474:	6063      	str	r3, [r4, #4]
 8002476:	6054      	str	r4, [r2, #4]
 8002478:	e7cb      	b.n	8002412 <_free_r+0x22>
 800247a:	bd38      	pop	{r3, r4, r5, pc}
 800247c:	2000027c 	.word	0x2000027c

08002480 <sbrk_aligned>:
 8002480:	b570      	push	{r4, r5, r6, lr}
 8002482:	4e0e      	ldr	r6, [pc, #56]	; (80024bc <sbrk_aligned+0x3c>)
 8002484:	460c      	mov	r4, r1
 8002486:	6831      	ldr	r1, [r6, #0]
 8002488:	4605      	mov	r5, r0
 800248a:	b911      	cbnz	r1, 8002492 <sbrk_aligned+0x12>
 800248c:	f000 fca8 	bl	8002de0 <_sbrk_r>
 8002490:	6030      	str	r0, [r6, #0]
 8002492:	4621      	mov	r1, r4
 8002494:	4628      	mov	r0, r5
 8002496:	f000 fca3 	bl	8002de0 <_sbrk_r>
 800249a:	1c43      	adds	r3, r0, #1
 800249c:	d00a      	beq.n	80024b4 <sbrk_aligned+0x34>
 800249e:	1cc4      	adds	r4, r0, #3
 80024a0:	f024 0403 	bic.w	r4, r4, #3
 80024a4:	42a0      	cmp	r0, r4
 80024a6:	d007      	beq.n	80024b8 <sbrk_aligned+0x38>
 80024a8:	1a21      	subs	r1, r4, r0
 80024aa:	4628      	mov	r0, r5
 80024ac:	f000 fc98 	bl	8002de0 <_sbrk_r>
 80024b0:	3001      	adds	r0, #1
 80024b2:	d101      	bne.n	80024b8 <sbrk_aligned+0x38>
 80024b4:	f04f 34ff 	mov.w	r4, #4294967295
 80024b8:	4620      	mov	r0, r4
 80024ba:	bd70      	pop	{r4, r5, r6, pc}
 80024bc:	20000280 	.word	0x20000280

080024c0 <_malloc_r>:
 80024c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80024c4:	1ccd      	adds	r5, r1, #3
 80024c6:	f025 0503 	bic.w	r5, r5, #3
 80024ca:	3508      	adds	r5, #8
 80024cc:	2d0c      	cmp	r5, #12
 80024ce:	bf38      	it	cc
 80024d0:	250c      	movcc	r5, #12
 80024d2:	2d00      	cmp	r5, #0
 80024d4:	4607      	mov	r7, r0
 80024d6:	db01      	blt.n	80024dc <_malloc_r+0x1c>
 80024d8:	42a9      	cmp	r1, r5
 80024da:	d905      	bls.n	80024e8 <_malloc_r+0x28>
 80024dc:	230c      	movs	r3, #12
 80024de:	2600      	movs	r6, #0
 80024e0:	603b      	str	r3, [r7, #0]
 80024e2:	4630      	mov	r0, r6
 80024e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80024e8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80025bc <_malloc_r+0xfc>
 80024ec:	f000 f868 	bl	80025c0 <__malloc_lock>
 80024f0:	f8d8 3000 	ldr.w	r3, [r8]
 80024f4:	461c      	mov	r4, r3
 80024f6:	bb5c      	cbnz	r4, 8002550 <_malloc_r+0x90>
 80024f8:	4629      	mov	r1, r5
 80024fa:	4638      	mov	r0, r7
 80024fc:	f7ff ffc0 	bl	8002480 <sbrk_aligned>
 8002500:	1c43      	adds	r3, r0, #1
 8002502:	4604      	mov	r4, r0
 8002504:	d155      	bne.n	80025b2 <_malloc_r+0xf2>
 8002506:	f8d8 4000 	ldr.w	r4, [r8]
 800250a:	4626      	mov	r6, r4
 800250c:	2e00      	cmp	r6, #0
 800250e:	d145      	bne.n	800259c <_malloc_r+0xdc>
 8002510:	2c00      	cmp	r4, #0
 8002512:	d048      	beq.n	80025a6 <_malloc_r+0xe6>
 8002514:	6823      	ldr	r3, [r4, #0]
 8002516:	4631      	mov	r1, r6
 8002518:	4638      	mov	r0, r7
 800251a:	eb04 0903 	add.w	r9, r4, r3
 800251e:	f000 fc5f 	bl	8002de0 <_sbrk_r>
 8002522:	4581      	cmp	r9, r0
 8002524:	d13f      	bne.n	80025a6 <_malloc_r+0xe6>
 8002526:	6821      	ldr	r1, [r4, #0]
 8002528:	4638      	mov	r0, r7
 800252a:	1a6d      	subs	r5, r5, r1
 800252c:	4629      	mov	r1, r5
 800252e:	f7ff ffa7 	bl	8002480 <sbrk_aligned>
 8002532:	3001      	adds	r0, #1
 8002534:	d037      	beq.n	80025a6 <_malloc_r+0xe6>
 8002536:	6823      	ldr	r3, [r4, #0]
 8002538:	442b      	add	r3, r5
 800253a:	6023      	str	r3, [r4, #0]
 800253c:	f8d8 3000 	ldr.w	r3, [r8]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d038      	beq.n	80025b6 <_malloc_r+0xf6>
 8002544:	685a      	ldr	r2, [r3, #4]
 8002546:	42a2      	cmp	r2, r4
 8002548:	d12b      	bne.n	80025a2 <_malloc_r+0xe2>
 800254a:	2200      	movs	r2, #0
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	e00f      	b.n	8002570 <_malloc_r+0xb0>
 8002550:	6822      	ldr	r2, [r4, #0]
 8002552:	1b52      	subs	r2, r2, r5
 8002554:	d41f      	bmi.n	8002596 <_malloc_r+0xd6>
 8002556:	2a0b      	cmp	r2, #11
 8002558:	d917      	bls.n	800258a <_malloc_r+0xca>
 800255a:	1961      	adds	r1, r4, r5
 800255c:	42a3      	cmp	r3, r4
 800255e:	6025      	str	r5, [r4, #0]
 8002560:	bf18      	it	ne
 8002562:	6059      	strne	r1, [r3, #4]
 8002564:	6863      	ldr	r3, [r4, #4]
 8002566:	bf08      	it	eq
 8002568:	f8c8 1000 	streq.w	r1, [r8]
 800256c:	5162      	str	r2, [r4, r5]
 800256e:	604b      	str	r3, [r1, #4]
 8002570:	4638      	mov	r0, r7
 8002572:	f104 060b 	add.w	r6, r4, #11
 8002576:	f000 f829 	bl	80025cc <__malloc_unlock>
 800257a:	f026 0607 	bic.w	r6, r6, #7
 800257e:	1d23      	adds	r3, r4, #4
 8002580:	1af2      	subs	r2, r6, r3
 8002582:	d0ae      	beq.n	80024e2 <_malloc_r+0x22>
 8002584:	1b9b      	subs	r3, r3, r6
 8002586:	50a3      	str	r3, [r4, r2]
 8002588:	e7ab      	b.n	80024e2 <_malloc_r+0x22>
 800258a:	42a3      	cmp	r3, r4
 800258c:	6862      	ldr	r2, [r4, #4]
 800258e:	d1dd      	bne.n	800254c <_malloc_r+0x8c>
 8002590:	f8c8 2000 	str.w	r2, [r8]
 8002594:	e7ec      	b.n	8002570 <_malloc_r+0xb0>
 8002596:	4623      	mov	r3, r4
 8002598:	6864      	ldr	r4, [r4, #4]
 800259a:	e7ac      	b.n	80024f6 <_malloc_r+0x36>
 800259c:	4634      	mov	r4, r6
 800259e:	6876      	ldr	r6, [r6, #4]
 80025a0:	e7b4      	b.n	800250c <_malloc_r+0x4c>
 80025a2:	4613      	mov	r3, r2
 80025a4:	e7cc      	b.n	8002540 <_malloc_r+0x80>
 80025a6:	230c      	movs	r3, #12
 80025a8:	4638      	mov	r0, r7
 80025aa:	603b      	str	r3, [r7, #0]
 80025ac:	f000 f80e 	bl	80025cc <__malloc_unlock>
 80025b0:	e797      	b.n	80024e2 <_malloc_r+0x22>
 80025b2:	6025      	str	r5, [r4, #0]
 80025b4:	e7dc      	b.n	8002570 <_malloc_r+0xb0>
 80025b6:	605b      	str	r3, [r3, #4]
 80025b8:	deff      	udf	#255	; 0xff
 80025ba:	bf00      	nop
 80025bc:	2000027c 	.word	0x2000027c

080025c0 <__malloc_lock>:
 80025c0:	4801      	ldr	r0, [pc, #4]	; (80025c8 <__malloc_lock+0x8>)
 80025c2:	f7ff bf13 	b.w	80023ec <__retarget_lock_acquire_recursive>
 80025c6:	bf00      	nop
 80025c8:	20000278 	.word	0x20000278

080025cc <__malloc_unlock>:
 80025cc:	4801      	ldr	r0, [pc, #4]	; (80025d4 <__malloc_unlock+0x8>)
 80025ce:	f7ff bf0e 	b.w	80023ee <__retarget_lock_release_recursive>
 80025d2:	bf00      	nop
 80025d4:	20000278 	.word	0x20000278

080025d8 <__sfputc_r>:
 80025d8:	6893      	ldr	r3, [r2, #8]
 80025da:	b410      	push	{r4}
 80025dc:	3b01      	subs	r3, #1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	6093      	str	r3, [r2, #8]
 80025e2:	da07      	bge.n	80025f4 <__sfputc_r+0x1c>
 80025e4:	6994      	ldr	r4, [r2, #24]
 80025e6:	42a3      	cmp	r3, r4
 80025e8:	db01      	blt.n	80025ee <__sfputc_r+0x16>
 80025ea:	290a      	cmp	r1, #10
 80025ec:	d102      	bne.n	80025f4 <__sfputc_r+0x1c>
 80025ee:	bc10      	pop	{r4}
 80025f0:	f7ff bdef 	b.w	80021d2 <__swbuf_r>
 80025f4:	6813      	ldr	r3, [r2, #0]
 80025f6:	1c58      	adds	r0, r3, #1
 80025f8:	6010      	str	r0, [r2, #0]
 80025fa:	7019      	strb	r1, [r3, #0]
 80025fc:	4608      	mov	r0, r1
 80025fe:	bc10      	pop	{r4}
 8002600:	4770      	bx	lr

08002602 <__sfputs_r>:
 8002602:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002604:	4606      	mov	r6, r0
 8002606:	460f      	mov	r7, r1
 8002608:	4614      	mov	r4, r2
 800260a:	18d5      	adds	r5, r2, r3
 800260c:	42ac      	cmp	r4, r5
 800260e:	d101      	bne.n	8002614 <__sfputs_r+0x12>
 8002610:	2000      	movs	r0, #0
 8002612:	e007      	b.n	8002624 <__sfputs_r+0x22>
 8002614:	463a      	mov	r2, r7
 8002616:	4630      	mov	r0, r6
 8002618:	f814 1b01 	ldrb.w	r1, [r4], #1
 800261c:	f7ff ffdc 	bl	80025d8 <__sfputc_r>
 8002620:	1c43      	adds	r3, r0, #1
 8002622:	d1f3      	bne.n	800260c <__sfputs_r+0xa>
 8002624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002628 <_vfiprintf_r>:
 8002628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800262c:	460d      	mov	r5, r1
 800262e:	4614      	mov	r4, r2
 8002630:	4698      	mov	r8, r3
 8002632:	4606      	mov	r6, r0
 8002634:	b09d      	sub	sp, #116	; 0x74
 8002636:	b118      	cbz	r0, 8002640 <_vfiprintf_r+0x18>
 8002638:	6a03      	ldr	r3, [r0, #32]
 800263a:	b90b      	cbnz	r3, 8002640 <_vfiprintf_r+0x18>
 800263c:	f7ff fce2 	bl	8002004 <__sinit>
 8002640:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002642:	07d9      	lsls	r1, r3, #31
 8002644:	d405      	bmi.n	8002652 <_vfiprintf_r+0x2a>
 8002646:	89ab      	ldrh	r3, [r5, #12]
 8002648:	059a      	lsls	r2, r3, #22
 800264a:	d402      	bmi.n	8002652 <_vfiprintf_r+0x2a>
 800264c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800264e:	f7ff fecd 	bl	80023ec <__retarget_lock_acquire_recursive>
 8002652:	89ab      	ldrh	r3, [r5, #12]
 8002654:	071b      	lsls	r3, r3, #28
 8002656:	d501      	bpl.n	800265c <_vfiprintf_r+0x34>
 8002658:	692b      	ldr	r3, [r5, #16]
 800265a:	b99b      	cbnz	r3, 8002684 <_vfiprintf_r+0x5c>
 800265c:	4629      	mov	r1, r5
 800265e:	4630      	mov	r0, r6
 8002660:	f7ff fdf4 	bl	800224c <__swsetup_r>
 8002664:	b170      	cbz	r0, 8002684 <_vfiprintf_r+0x5c>
 8002666:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002668:	07dc      	lsls	r4, r3, #31
 800266a:	d504      	bpl.n	8002676 <_vfiprintf_r+0x4e>
 800266c:	f04f 30ff 	mov.w	r0, #4294967295
 8002670:	b01d      	add	sp, #116	; 0x74
 8002672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002676:	89ab      	ldrh	r3, [r5, #12]
 8002678:	0598      	lsls	r0, r3, #22
 800267a:	d4f7      	bmi.n	800266c <_vfiprintf_r+0x44>
 800267c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800267e:	f7ff feb6 	bl	80023ee <__retarget_lock_release_recursive>
 8002682:	e7f3      	b.n	800266c <_vfiprintf_r+0x44>
 8002684:	2300      	movs	r3, #0
 8002686:	9309      	str	r3, [sp, #36]	; 0x24
 8002688:	2320      	movs	r3, #32
 800268a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800268e:	2330      	movs	r3, #48	; 0x30
 8002690:	f04f 0901 	mov.w	r9, #1
 8002694:	f8cd 800c 	str.w	r8, [sp, #12]
 8002698:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8002848 <_vfiprintf_r+0x220>
 800269c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80026a0:	4623      	mov	r3, r4
 80026a2:	469a      	mov	sl, r3
 80026a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80026a8:	b10a      	cbz	r2, 80026ae <_vfiprintf_r+0x86>
 80026aa:	2a25      	cmp	r2, #37	; 0x25
 80026ac:	d1f9      	bne.n	80026a2 <_vfiprintf_r+0x7a>
 80026ae:	ebba 0b04 	subs.w	fp, sl, r4
 80026b2:	d00b      	beq.n	80026cc <_vfiprintf_r+0xa4>
 80026b4:	465b      	mov	r3, fp
 80026b6:	4622      	mov	r2, r4
 80026b8:	4629      	mov	r1, r5
 80026ba:	4630      	mov	r0, r6
 80026bc:	f7ff ffa1 	bl	8002602 <__sfputs_r>
 80026c0:	3001      	adds	r0, #1
 80026c2:	f000 80a9 	beq.w	8002818 <_vfiprintf_r+0x1f0>
 80026c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80026c8:	445a      	add	r2, fp
 80026ca:	9209      	str	r2, [sp, #36]	; 0x24
 80026cc:	f89a 3000 	ldrb.w	r3, [sl]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 80a1 	beq.w	8002818 <_vfiprintf_r+0x1f0>
 80026d6:	2300      	movs	r3, #0
 80026d8:	f04f 32ff 	mov.w	r2, #4294967295
 80026dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80026e0:	f10a 0a01 	add.w	sl, sl, #1
 80026e4:	9304      	str	r3, [sp, #16]
 80026e6:	9307      	str	r3, [sp, #28]
 80026e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80026ec:	931a      	str	r3, [sp, #104]	; 0x68
 80026ee:	4654      	mov	r4, sl
 80026f0:	2205      	movs	r2, #5
 80026f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80026f6:	4854      	ldr	r0, [pc, #336]	; (8002848 <_vfiprintf_r+0x220>)
 80026f8:	f000 fb82 	bl	8002e00 <memchr>
 80026fc:	9a04      	ldr	r2, [sp, #16]
 80026fe:	b9d8      	cbnz	r0, 8002738 <_vfiprintf_r+0x110>
 8002700:	06d1      	lsls	r1, r2, #27
 8002702:	bf44      	itt	mi
 8002704:	2320      	movmi	r3, #32
 8002706:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800270a:	0713      	lsls	r3, r2, #28
 800270c:	bf44      	itt	mi
 800270e:	232b      	movmi	r3, #43	; 0x2b
 8002710:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002714:	f89a 3000 	ldrb.w	r3, [sl]
 8002718:	2b2a      	cmp	r3, #42	; 0x2a
 800271a:	d015      	beq.n	8002748 <_vfiprintf_r+0x120>
 800271c:	4654      	mov	r4, sl
 800271e:	2000      	movs	r0, #0
 8002720:	f04f 0c0a 	mov.w	ip, #10
 8002724:	9a07      	ldr	r2, [sp, #28]
 8002726:	4621      	mov	r1, r4
 8002728:	f811 3b01 	ldrb.w	r3, [r1], #1
 800272c:	3b30      	subs	r3, #48	; 0x30
 800272e:	2b09      	cmp	r3, #9
 8002730:	d94d      	bls.n	80027ce <_vfiprintf_r+0x1a6>
 8002732:	b1b0      	cbz	r0, 8002762 <_vfiprintf_r+0x13a>
 8002734:	9207      	str	r2, [sp, #28]
 8002736:	e014      	b.n	8002762 <_vfiprintf_r+0x13a>
 8002738:	eba0 0308 	sub.w	r3, r0, r8
 800273c:	fa09 f303 	lsl.w	r3, r9, r3
 8002740:	4313      	orrs	r3, r2
 8002742:	46a2      	mov	sl, r4
 8002744:	9304      	str	r3, [sp, #16]
 8002746:	e7d2      	b.n	80026ee <_vfiprintf_r+0xc6>
 8002748:	9b03      	ldr	r3, [sp, #12]
 800274a:	1d19      	adds	r1, r3, #4
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	9103      	str	r1, [sp, #12]
 8002750:	2b00      	cmp	r3, #0
 8002752:	bfbb      	ittet	lt
 8002754:	425b      	neglt	r3, r3
 8002756:	f042 0202 	orrlt.w	r2, r2, #2
 800275a:	9307      	strge	r3, [sp, #28]
 800275c:	9307      	strlt	r3, [sp, #28]
 800275e:	bfb8      	it	lt
 8002760:	9204      	strlt	r2, [sp, #16]
 8002762:	7823      	ldrb	r3, [r4, #0]
 8002764:	2b2e      	cmp	r3, #46	; 0x2e
 8002766:	d10c      	bne.n	8002782 <_vfiprintf_r+0x15a>
 8002768:	7863      	ldrb	r3, [r4, #1]
 800276a:	2b2a      	cmp	r3, #42	; 0x2a
 800276c:	d134      	bne.n	80027d8 <_vfiprintf_r+0x1b0>
 800276e:	9b03      	ldr	r3, [sp, #12]
 8002770:	3402      	adds	r4, #2
 8002772:	1d1a      	adds	r2, r3, #4
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	9203      	str	r2, [sp, #12]
 8002778:	2b00      	cmp	r3, #0
 800277a:	bfb8      	it	lt
 800277c:	f04f 33ff 	movlt.w	r3, #4294967295
 8002780:	9305      	str	r3, [sp, #20]
 8002782:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800284c <_vfiprintf_r+0x224>
 8002786:	2203      	movs	r2, #3
 8002788:	4650      	mov	r0, sl
 800278a:	7821      	ldrb	r1, [r4, #0]
 800278c:	f000 fb38 	bl	8002e00 <memchr>
 8002790:	b138      	cbz	r0, 80027a2 <_vfiprintf_r+0x17a>
 8002792:	2240      	movs	r2, #64	; 0x40
 8002794:	9b04      	ldr	r3, [sp, #16]
 8002796:	eba0 000a 	sub.w	r0, r0, sl
 800279a:	4082      	lsls	r2, r0
 800279c:	4313      	orrs	r3, r2
 800279e:	3401      	adds	r4, #1
 80027a0:	9304      	str	r3, [sp, #16]
 80027a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80027a6:	2206      	movs	r2, #6
 80027a8:	4829      	ldr	r0, [pc, #164]	; (8002850 <_vfiprintf_r+0x228>)
 80027aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80027ae:	f000 fb27 	bl	8002e00 <memchr>
 80027b2:	2800      	cmp	r0, #0
 80027b4:	d03f      	beq.n	8002836 <_vfiprintf_r+0x20e>
 80027b6:	4b27      	ldr	r3, [pc, #156]	; (8002854 <_vfiprintf_r+0x22c>)
 80027b8:	bb1b      	cbnz	r3, 8002802 <_vfiprintf_r+0x1da>
 80027ba:	9b03      	ldr	r3, [sp, #12]
 80027bc:	3307      	adds	r3, #7
 80027be:	f023 0307 	bic.w	r3, r3, #7
 80027c2:	3308      	adds	r3, #8
 80027c4:	9303      	str	r3, [sp, #12]
 80027c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80027c8:	443b      	add	r3, r7
 80027ca:	9309      	str	r3, [sp, #36]	; 0x24
 80027cc:	e768      	b.n	80026a0 <_vfiprintf_r+0x78>
 80027ce:	460c      	mov	r4, r1
 80027d0:	2001      	movs	r0, #1
 80027d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80027d6:	e7a6      	b.n	8002726 <_vfiprintf_r+0xfe>
 80027d8:	2300      	movs	r3, #0
 80027da:	f04f 0c0a 	mov.w	ip, #10
 80027de:	4619      	mov	r1, r3
 80027e0:	3401      	adds	r4, #1
 80027e2:	9305      	str	r3, [sp, #20]
 80027e4:	4620      	mov	r0, r4
 80027e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80027ea:	3a30      	subs	r2, #48	; 0x30
 80027ec:	2a09      	cmp	r2, #9
 80027ee:	d903      	bls.n	80027f8 <_vfiprintf_r+0x1d0>
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0c6      	beq.n	8002782 <_vfiprintf_r+0x15a>
 80027f4:	9105      	str	r1, [sp, #20]
 80027f6:	e7c4      	b.n	8002782 <_vfiprintf_r+0x15a>
 80027f8:	4604      	mov	r4, r0
 80027fa:	2301      	movs	r3, #1
 80027fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8002800:	e7f0      	b.n	80027e4 <_vfiprintf_r+0x1bc>
 8002802:	ab03      	add	r3, sp, #12
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	462a      	mov	r2, r5
 8002808:	4630      	mov	r0, r6
 800280a:	4b13      	ldr	r3, [pc, #76]	; (8002858 <_vfiprintf_r+0x230>)
 800280c:	a904      	add	r1, sp, #16
 800280e:	f3af 8000 	nop.w
 8002812:	4607      	mov	r7, r0
 8002814:	1c78      	adds	r0, r7, #1
 8002816:	d1d6      	bne.n	80027c6 <_vfiprintf_r+0x19e>
 8002818:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800281a:	07d9      	lsls	r1, r3, #31
 800281c:	d405      	bmi.n	800282a <_vfiprintf_r+0x202>
 800281e:	89ab      	ldrh	r3, [r5, #12]
 8002820:	059a      	lsls	r2, r3, #22
 8002822:	d402      	bmi.n	800282a <_vfiprintf_r+0x202>
 8002824:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002826:	f7ff fde2 	bl	80023ee <__retarget_lock_release_recursive>
 800282a:	89ab      	ldrh	r3, [r5, #12]
 800282c:	065b      	lsls	r3, r3, #25
 800282e:	f53f af1d 	bmi.w	800266c <_vfiprintf_r+0x44>
 8002832:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002834:	e71c      	b.n	8002670 <_vfiprintf_r+0x48>
 8002836:	ab03      	add	r3, sp, #12
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	462a      	mov	r2, r5
 800283c:	4630      	mov	r0, r6
 800283e:	4b06      	ldr	r3, [pc, #24]	; (8002858 <_vfiprintf_r+0x230>)
 8002840:	a904      	add	r1, sp, #16
 8002842:	f000 f87d 	bl	8002940 <_printf_i>
 8002846:	e7e4      	b.n	8002812 <_vfiprintf_r+0x1ea>
 8002848:	08003002 	.word	0x08003002
 800284c:	08003008 	.word	0x08003008
 8002850:	0800300c 	.word	0x0800300c
 8002854:	00000000 	.word	0x00000000
 8002858:	08002603 	.word	0x08002603

0800285c <_printf_common>:
 800285c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002860:	4616      	mov	r6, r2
 8002862:	4699      	mov	r9, r3
 8002864:	688a      	ldr	r2, [r1, #8]
 8002866:	690b      	ldr	r3, [r1, #16]
 8002868:	4607      	mov	r7, r0
 800286a:	4293      	cmp	r3, r2
 800286c:	bfb8      	it	lt
 800286e:	4613      	movlt	r3, r2
 8002870:	6033      	str	r3, [r6, #0]
 8002872:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002876:	460c      	mov	r4, r1
 8002878:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800287c:	b10a      	cbz	r2, 8002882 <_printf_common+0x26>
 800287e:	3301      	adds	r3, #1
 8002880:	6033      	str	r3, [r6, #0]
 8002882:	6823      	ldr	r3, [r4, #0]
 8002884:	0699      	lsls	r1, r3, #26
 8002886:	bf42      	ittt	mi
 8002888:	6833      	ldrmi	r3, [r6, #0]
 800288a:	3302      	addmi	r3, #2
 800288c:	6033      	strmi	r3, [r6, #0]
 800288e:	6825      	ldr	r5, [r4, #0]
 8002890:	f015 0506 	ands.w	r5, r5, #6
 8002894:	d106      	bne.n	80028a4 <_printf_common+0x48>
 8002896:	f104 0a19 	add.w	sl, r4, #25
 800289a:	68e3      	ldr	r3, [r4, #12]
 800289c:	6832      	ldr	r2, [r6, #0]
 800289e:	1a9b      	subs	r3, r3, r2
 80028a0:	42ab      	cmp	r3, r5
 80028a2:	dc2b      	bgt.n	80028fc <_printf_common+0xa0>
 80028a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80028a8:	1e13      	subs	r3, r2, #0
 80028aa:	6822      	ldr	r2, [r4, #0]
 80028ac:	bf18      	it	ne
 80028ae:	2301      	movne	r3, #1
 80028b0:	0692      	lsls	r2, r2, #26
 80028b2:	d430      	bmi.n	8002916 <_printf_common+0xba>
 80028b4:	4649      	mov	r1, r9
 80028b6:	4638      	mov	r0, r7
 80028b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80028bc:	47c0      	blx	r8
 80028be:	3001      	adds	r0, #1
 80028c0:	d023      	beq.n	800290a <_printf_common+0xae>
 80028c2:	6823      	ldr	r3, [r4, #0]
 80028c4:	6922      	ldr	r2, [r4, #16]
 80028c6:	f003 0306 	and.w	r3, r3, #6
 80028ca:	2b04      	cmp	r3, #4
 80028cc:	bf14      	ite	ne
 80028ce:	2500      	movne	r5, #0
 80028d0:	6833      	ldreq	r3, [r6, #0]
 80028d2:	f04f 0600 	mov.w	r6, #0
 80028d6:	bf08      	it	eq
 80028d8:	68e5      	ldreq	r5, [r4, #12]
 80028da:	f104 041a 	add.w	r4, r4, #26
 80028de:	bf08      	it	eq
 80028e0:	1aed      	subeq	r5, r5, r3
 80028e2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80028e6:	bf08      	it	eq
 80028e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80028ec:	4293      	cmp	r3, r2
 80028ee:	bfc4      	itt	gt
 80028f0:	1a9b      	subgt	r3, r3, r2
 80028f2:	18ed      	addgt	r5, r5, r3
 80028f4:	42b5      	cmp	r5, r6
 80028f6:	d11a      	bne.n	800292e <_printf_common+0xd2>
 80028f8:	2000      	movs	r0, #0
 80028fa:	e008      	b.n	800290e <_printf_common+0xb2>
 80028fc:	2301      	movs	r3, #1
 80028fe:	4652      	mov	r2, sl
 8002900:	4649      	mov	r1, r9
 8002902:	4638      	mov	r0, r7
 8002904:	47c0      	blx	r8
 8002906:	3001      	adds	r0, #1
 8002908:	d103      	bne.n	8002912 <_printf_common+0xb6>
 800290a:	f04f 30ff 	mov.w	r0, #4294967295
 800290e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002912:	3501      	adds	r5, #1
 8002914:	e7c1      	b.n	800289a <_printf_common+0x3e>
 8002916:	2030      	movs	r0, #48	; 0x30
 8002918:	18e1      	adds	r1, r4, r3
 800291a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800291e:	1c5a      	adds	r2, r3, #1
 8002920:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002924:	4422      	add	r2, r4
 8002926:	3302      	adds	r3, #2
 8002928:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800292c:	e7c2      	b.n	80028b4 <_printf_common+0x58>
 800292e:	2301      	movs	r3, #1
 8002930:	4622      	mov	r2, r4
 8002932:	4649      	mov	r1, r9
 8002934:	4638      	mov	r0, r7
 8002936:	47c0      	blx	r8
 8002938:	3001      	adds	r0, #1
 800293a:	d0e6      	beq.n	800290a <_printf_common+0xae>
 800293c:	3601      	adds	r6, #1
 800293e:	e7d9      	b.n	80028f4 <_printf_common+0x98>

08002940 <_printf_i>:
 8002940:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002944:	7e0f      	ldrb	r7, [r1, #24]
 8002946:	4691      	mov	r9, r2
 8002948:	2f78      	cmp	r7, #120	; 0x78
 800294a:	4680      	mov	r8, r0
 800294c:	460c      	mov	r4, r1
 800294e:	469a      	mov	sl, r3
 8002950:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002952:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002956:	d807      	bhi.n	8002968 <_printf_i+0x28>
 8002958:	2f62      	cmp	r7, #98	; 0x62
 800295a:	d80a      	bhi.n	8002972 <_printf_i+0x32>
 800295c:	2f00      	cmp	r7, #0
 800295e:	f000 80d5 	beq.w	8002b0c <_printf_i+0x1cc>
 8002962:	2f58      	cmp	r7, #88	; 0x58
 8002964:	f000 80c1 	beq.w	8002aea <_printf_i+0x1aa>
 8002968:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800296c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002970:	e03a      	b.n	80029e8 <_printf_i+0xa8>
 8002972:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002976:	2b15      	cmp	r3, #21
 8002978:	d8f6      	bhi.n	8002968 <_printf_i+0x28>
 800297a:	a101      	add	r1, pc, #4	; (adr r1, 8002980 <_printf_i+0x40>)
 800297c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002980:	080029d9 	.word	0x080029d9
 8002984:	080029ed 	.word	0x080029ed
 8002988:	08002969 	.word	0x08002969
 800298c:	08002969 	.word	0x08002969
 8002990:	08002969 	.word	0x08002969
 8002994:	08002969 	.word	0x08002969
 8002998:	080029ed 	.word	0x080029ed
 800299c:	08002969 	.word	0x08002969
 80029a0:	08002969 	.word	0x08002969
 80029a4:	08002969 	.word	0x08002969
 80029a8:	08002969 	.word	0x08002969
 80029ac:	08002af3 	.word	0x08002af3
 80029b0:	08002a19 	.word	0x08002a19
 80029b4:	08002aad 	.word	0x08002aad
 80029b8:	08002969 	.word	0x08002969
 80029bc:	08002969 	.word	0x08002969
 80029c0:	08002b15 	.word	0x08002b15
 80029c4:	08002969 	.word	0x08002969
 80029c8:	08002a19 	.word	0x08002a19
 80029cc:	08002969 	.word	0x08002969
 80029d0:	08002969 	.word	0x08002969
 80029d4:	08002ab5 	.word	0x08002ab5
 80029d8:	682b      	ldr	r3, [r5, #0]
 80029da:	1d1a      	adds	r2, r3, #4
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	602a      	str	r2, [r5, #0]
 80029e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80029e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80029e8:	2301      	movs	r3, #1
 80029ea:	e0a0      	b.n	8002b2e <_printf_i+0x1ee>
 80029ec:	6820      	ldr	r0, [r4, #0]
 80029ee:	682b      	ldr	r3, [r5, #0]
 80029f0:	0607      	lsls	r7, r0, #24
 80029f2:	f103 0104 	add.w	r1, r3, #4
 80029f6:	6029      	str	r1, [r5, #0]
 80029f8:	d501      	bpl.n	80029fe <_printf_i+0xbe>
 80029fa:	681e      	ldr	r6, [r3, #0]
 80029fc:	e003      	b.n	8002a06 <_printf_i+0xc6>
 80029fe:	0646      	lsls	r6, r0, #25
 8002a00:	d5fb      	bpl.n	80029fa <_printf_i+0xba>
 8002a02:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002a06:	2e00      	cmp	r6, #0
 8002a08:	da03      	bge.n	8002a12 <_printf_i+0xd2>
 8002a0a:	232d      	movs	r3, #45	; 0x2d
 8002a0c:	4276      	negs	r6, r6
 8002a0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a12:	230a      	movs	r3, #10
 8002a14:	4859      	ldr	r0, [pc, #356]	; (8002b7c <_printf_i+0x23c>)
 8002a16:	e012      	b.n	8002a3e <_printf_i+0xfe>
 8002a18:	682b      	ldr	r3, [r5, #0]
 8002a1a:	6820      	ldr	r0, [r4, #0]
 8002a1c:	1d19      	adds	r1, r3, #4
 8002a1e:	6029      	str	r1, [r5, #0]
 8002a20:	0605      	lsls	r5, r0, #24
 8002a22:	d501      	bpl.n	8002a28 <_printf_i+0xe8>
 8002a24:	681e      	ldr	r6, [r3, #0]
 8002a26:	e002      	b.n	8002a2e <_printf_i+0xee>
 8002a28:	0641      	lsls	r1, r0, #25
 8002a2a:	d5fb      	bpl.n	8002a24 <_printf_i+0xe4>
 8002a2c:	881e      	ldrh	r6, [r3, #0]
 8002a2e:	2f6f      	cmp	r7, #111	; 0x6f
 8002a30:	bf0c      	ite	eq
 8002a32:	2308      	moveq	r3, #8
 8002a34:	230a      	movne	r3, #10
 8002a36:	4851      	ldr	r0, [pc, #324]	; (8002b7c <_printf_i+0x23c>)
 8002a38:	2100      	movs	r1, #0
 8002a3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002a3e:	6865      	ldr	r5, [r4, #4]
 8002a40:	2d00      	cmp	r5, #0
 8002a42:	bfa8      	it	ge
 8002a44:	6821      	ldrge	r1, [r4, #0]
 8002a46:	60a5      	str	r5, [r4, #8]
 8002a48:	bfa4      	itt	ge
 8002a4a:	f021 0104 	bicge.w	r1, r1, #4
 8002a4e:	6021      	strge	r1, [r4, #0]
 8002a50:	b90e      	cbnz	r6, 8002a56 <_printf_i+0x116>
 8002a52:	2d00      	cmp	r5, #0
 8002a54:	d04b      	beq.n	8002aee <_printf_i+0x1ae>
 8002a56:	4615      	mov	r5, r2
 8002a58:	fbb6 f1f3 	udiv	r1, r6, r3
 8002a5c:	fb03 6711 	mls	r7, r3, r1, r6
 8002a60:	5dc7      	ldrb	r7, [r0, r7]
 8002a62:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002a66:	4637      	mov	r7, r6
 8002a68:	42bb      	cmp	r3, r7
 8002a6a:	460e      	mov	r6, r1
 8002a6c:	d9f4      	bls.n	8002a58 <_printf_i+0x118>
 8002a6e:	2b08      	cmp	r3, #8
 8002a70:	d10b      	bne.n	8002a8a <_printf_i+0x14a>
 8002a72:	6823      	ldr	r3, [r4, #0]
 8002a74:	07de      	lsls	r6, r3, #31
 8002a76:	d508      	bpl.n	8002a8a <_printf_i+0x14a>
 8002a78:	6923      	ldr	r3, [r4, #16]
 8002a7a:	6861      	ldr	r1, [r4, #4]
 8002a7c:	4299      	cmp	r1, r3
 8002a7e:	bfde      	ittt	le
 8002a80:	2330      	movle	r3, #48	; 0x30
 8002a82:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002a86:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002a8a:	1b52      	subs	r2, r2, r5
 8002a8c:	6122      	str	r2, [r4, #16]
 8002a8e:	464b      	mov	r3, r9
 8002a90:	4621      	mov	r1, r4
 8002a92:	4640      	mov	r0, r8
 8002a94:	f8cd a000 	str.w	sl, [sp]
 8002a98:	aa03      	add	r2, sp, #12
 8002a9a:	f7ff fedf 	bl	800285c <_printf_common>
 8002a9e:	3001      	adds	r0, #1
 8002aa0:	d14a      	bne.n	8002b38 <_printf_i+0x1f8>
 8002aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8002aa6:	b004      	add	sp, #16
 8002aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002aac:	6823      	ldr	r3, [r4, #0]
 8002aae:	f043 0320 	orr.w	r3, r3, #32
 8002ab2:	6023      	str	r3, [r4, #0]
 8002ab4:	2778      	movs	r7, #120	; 0x78
 8002ab6:	4832      	ldr	r0, [pc, #200]	; (8002b80 <_printf_i+0x240>)
 8002ab8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002abc:	6823      	ldr	r3, [r4, #0]
 8002abe:	6829      	ldr	r1, [r5, #0]
 8002ac0:	061f      	lsls	r7, r3, #24
 8002ac2:	f851 6b04 	ldr.w	r6, [r1], #4
 8002ac6:	d402      	bmi.n	8002ace <_printf_i+0x18e>
 8002ac8:	065f      	lsls	r7, r3, #25
 8002aca:	bf48      	it	mi
 8002acc:	b2b6      	uxthmi	r6, r6
 8002ace:	07df      	lsls	r7, r3, #31
 8002ad0:	bf48      	it	mi
 8002ad2:	f043 0320 	orrmi.w	r3, r3, #32
 8002ad6:	6029      	str	r1, [r5, #0]
 8002ad8:	bf48      	it	mi
 8002ada:	6023      	strmi	r3, [r4, #0]
 8002adc:	b91e      	cbnz	r6, 8002ae6 <_printf_i+0x1a6>
 8002ade:	6823      	ldr	r3, [r4, #0]
 8002ae0:	f023 0320 	bic.w	r3, r3, #32
 8002ae4:	6023      	str	r3, [r4, #0]
 8002ae6:	2310      	movs	r3, #16
 8002ae8:	e7a6      	b.n	8002a38 <_printf_i+0xf8>
 8002aea:	4824      	ldr	r0, [pc, #144]	; (8002b7c <_printf_i+0x23c>)
 8002aec:	e7e4      	b.n	8002ab8 <_printf_i+0x178>
 8002aee:	4615      	mov	r5, r2
 8002af0:	e7bd      	b.n	8002a6e <_printf_i+0x12e>
 8002af2:	682b      	ldr	r3, [r5, #0]
 8002af4:	6826      	ldr	r6, [r4, #0]
 8002af6:	1d18      	adds	r0, r3, #4
 8002af8:	6961      	ldr	r1, [r4, #20]
 8002afa:	6028      	str	r0, [r5, #0]
 8002afc:	0635      	lsls	r5, r6, #24
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	d501      	bpl.n	8002b06 <_printf_i+0x1c6>
 8002b02:	6019      	str	r1, [r3, #0]
 8002b04:	e002      	b.n	8002b0c <_printf_i+0x1cc>
 8002b06:	0670      	lsls	r0, r6, #25
 8002b08:	d5fb      	bpl.n	8002b02 <_printf_i+0x1c2>
 8002b0a:	8019      	strh	r1, [r3, #0]
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	4615      	mov	r5, r2
 8002b10:	6123      	str	r3, [r4, #16]
 8002b12:	e7bc      	b.n	8002a8e <_printf_i+0x14e>
 8002b14:	682b      	ldr	r3, [r5, #0]
 8002b16:	2100      	movs	r1, #0
 8002b18:	1d1a      	adds	r2, r3, #4
 8002b1a:	602a      	str	r2, [r5, #0]
 8002b1c:	681d      	ldr	r5, [r3, #0]
 8002b1e:	6862      	ldr	r2, [r4, #4]
 8002b20:	4628      	mov	r0, r5
 8002b22:	f000 f96d 	bl	8002e00 <memchr>
 8002b26:	b108      	cbz	r0, 8002b2c <_printf_i+0x1ec>
 8002b28:	1b40      	subs	r0, r0, r5
 8002b2a:	6060      	str	r0, [r4, #4]
 8002b2c:	6863      	ldr	r3, [r4, #4]
 8002b2e:	6123      	str	r3, [r4, #16]
 8002b30:	2300      	movs	r3, #0
 8002b32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b36:	e7aa      	b.n	8002a8e <_printf_i+0x14e>
 8002b38:	462a      	mov	r2, r5
 8002b3a:	4649      	mov	r1, r9
 8002b3c:	4640      	mov	r0, r8
 8002b3e:	6923      	ldr	r3, [r4, #16]
 8002b40:	47d0      	blx	sl
 8002b42:	3001      	adds	r0, #1
 8002b44:	d0ad      	beq.n	8002aa2 <_printf_i+0x162>
 8002b46:	6823      	ldr	r3, [r4, #0]
 8002b48:	079b      	lsls	r3, r3, #30
 8002b4a:	d413      	bmi.n	8002b74 <_printf_i+0x234>
 8002b4c:	68e0      	ldr	r0, [r4, #12]
 8002b4e:	9b03      	ldr	r3, [sp, #12]
 8002b50:	4298      	cmp	r0, r3
 8002b52:	bfb8      	it	lt
 8002b54:	4618      	movlt	r0, r3
 8002b56:	e7a6      	b.n	8002aa6 <_printf_i+0x166>
 8002b58:	2301      	movs	r3, #1
 8002b5a:	4632      	mov	r2, r6
 8002b5c:	4649      	mov	r1, r9
 8002b5e:	4640      	mov	r0, r8
 8002b60:	47d0      	blx	sl
 8002b62:	3001      	adds	r0, #1
 8002b64:	d09d      	beq.n	8002aa2 <_printf_i+0x162>
 8002b66:	3501      	adds	r5, #1
 8002b68:	68e3      	ldr	r3, [r4, #12]
 8002b6a:	9903      	ldr	r1, [sp, #12]
 8002b6c:	1a5b      	subs	r3, r3, r1
 8002b6e:	42ab      	cmp	r3, r5
 8002b70:	dcf2      	bgt.n	8002b58 <_printf_i+0x218>
 8002b72:	e7eb      	b.n	8002b4c <_printf_i+0x20c>
 8002b74:	2500      	movs	r5, #0
 8002b76:	f104 0619 	add.w	r6, r4, #25
 8002b7a:	e7f5      	b.n	8002b68 <_printf_i+0x228>
 8002b7c:	08003013 	.word	0x08003013
 8002b80:	08003024 	.word	0x08003024

08002b84 <__sflush_r>:
 8002b84:	898a      	ldrh	r2, [r1, #12]
 8002b86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b88:	4605      	mov	r5, r0
 8002b8a:	0710      	lsls	r0, r2, #28
 8002b8c:	460c      	mov	r4, r1
 8002b8e:	d457      	bmi.n	8002c40 <__sflush_r+0xbc>
 8002b90:	684b      	ldr	r3, [r1, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	dc04      	bgt.n	8002ba0 <__sflush_r+0x1c>
 8002b96:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	dc01      	bgt.n	8002ba0 <__sflush_r+0x1c>
 8002b9c:	2000      	movs	r0, #0
 8002b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ba0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002ba2:	2e00      	cmp	r6, #0
 8002ba4:	d0fa      	beq.n	8002b9c <__sflush_r+0x18>
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002bac:	682f      	ldr	r7, [r5, #0]
 8002bae:	6a21      	ldr	r1, [r4, #32]
 8002bb0:	602b      	str	r3, [r5, #0]
 8002bb2:	d032      	beq.n	8002c1a <__sflush_r+0x96>
 8002bb4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002bb6:	89a3      	ldrh	r3, [r4, #12]
 8002bb8:	075a      	lsls	r2, r3, #29
 8002bba:	d505      	bpl.n	8002bc8 <__sflush_r+0x44>
 8002bbc:	6863      	ldr	r3, [r4, #4]
 8002bbe:	1ac0      	subs	r0, r0, r3
 8002bc0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002bc2:	b10b      	cbz	r3, 8002bc8 <__sflush_r+0x44>
 8002bc4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002bc6:	1ac0      	subs	r0, r0, r3
 8002bc8:	2300      	movs	r3, #0
 8002bca:	4602      	mov	r2, r0
 8002bcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002bce:	4628      	mov	r0, r5
 8002bd0:	6a21      	ldr	r1, [r4, #32]
 8002bd2:	47b0      	blx	r6
 8002bd4:	1c43      	adds	r3, r0, #1
 8002bd6:	89a3      	ldrh	r3, [r4, #12]
 8002bd8:	d106      	bne.n	8002be8 <__sflush_r+0x64>
 8002bda:	6829      	ldr	r1, [r5, #0]
 8002bdc:	291d      	cmp	r1, #29
 8002bde:	d82b      	bhi.n	8002c38 <__sflush_r+0xb4>
 8002be0:	4a28      	ldr	r2, [pc, #160]	; (8002c84 <__sflush_r+0x100>)
 8002be2:	410a      	asrs	r2, r1
 8002be4:	07d6      	lsls	r6, r2, #31
 8002be6:	d427      	bmi.n	8002c38 <__sflush_r+0xb4>
 8002be8:	2200      	movs	r2, #0
 8002bea:	6062      	str	r2, [r4, #4]
 8002bec:	6922      	ldr	r2, [r4, #16]
 8002bee:	04d9      	lsls	r1, r3, #19
 8002bf0:	6022      	str	r2, [r4, #0]
 8002bf2:	d504      	bpl.n	8002bfe <__sflush_r+0x7a>
 8002bf4:	1c42      	adds	r2, r0, #1
 8002bf6:	d101      	bne.n	8002bfc <__sflush_r+0x78>
 8002bf8:	682b      	ldr	r3, [r5, #0]
 8002bfa:	b903      	cbnz	r3, 8002bfe <__sflush_r+0x7a>
 8002bfc:	6560      	str	r0, [r4, #84]	; 0x54
 8002bfe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c00:	602f      	str	r7, [r5, #0]
 8002c02:	2900      	cmp	r1, #0
 8002c04:	d0ca      	beq.n	8002b9c <__sflush_r+0x18>
 8002c06:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002c0a:	4299      	cmp	r1, r3
 8002c0c:	d002      	beq.n	8002c14 <__sflush_r+0x90>
 8002c0e:	4628      	mov	r0, r5
 8002c10:	f7ff fbee 	bl	80023f0 <_free_r>
 8002c14:	2000      	movs	r0, #0
 8002c16:	6360      	str	r0, [r4, #52]	; 0x34
 8002c18:	e7c1      	b.n	8002b9e <__sflush_r+0x1a>
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	4628      	mov	r0, r5
 8002c1e:	47b0      	blx	r6
 8002c20:	1c41      	adds	r1, r0, #1
 8002c22:	d1c8      	bne.n	8002bb6 <__sflush_r+0x32>
 8002c24:	682b      	ldr	r3, [r5, #0]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d0c5      	beq.n	8002bb6 <__sflush_r+0x32>
 8002c2a:	2b1d      	cmp	r3, #29
 8002c2c:	d001      	beq.n	8002c32 <__sflush_r+0xae>
 8002c2e:	2b16      	cmp	r3, #22
 8002c30:	d101      	bne.n	8002c36 <__sflush_r+0xb2>
 8002c32:	602f      	str	r7, [r5, #0]
 8002c34:	e7b2      	b.n	8002b9c <__sflush_r+0x18>
 8002c36:	89a3      	ldrh	r3, [r4, #12]
 8002c38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c3c:	81a3      	strh	r3, [r4, #12]
 8002c3e:	e7ae      	b.n	8002b9e <__sflush_r+0x1a>
 8002c40:	690f      	ldr	r7, [r1, #16]
 8002c42:	2f00      	cmp	r7, #0
 8002c44:	d0aa      	beq.n	8002b9c <__sflush_r+0x18>
 8002c46:	0793      	lsls	r3, r2, #30
 8002c48:	bf18      	it	ne
 8002c4a:	2300      	movne	r3, #0
 8002c4c:	680e      	ldr	r6, [r1, #0]
 8002c4e:	bf08      	it	eq
 8002c50:	694b      	ldreq	r3, [r1, #20]
 8002c52:	1bf6      	subs	r6, r6, r7
 8002c54:	600f      	str	r7, [r1, #0]
 8002c56:	608b      	str	r3, [r1, #8]
 8002c58:	2e00      	cmp	r6, #0
 8002c5a:	dd9f      	ble.n	8002b9c <__sflush_r+0x18>
 8002c5c:	4633      	mov	r3, r6
 8002c5e:	463a      	mov	r2, r7
 8002c60:	4628      	mov	r0, r5
 8002c62:	6a21      	ldr	r1, [r4, #32]
 8002c64:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002c68:	47e0      	blx	ip
 8002c6a:	2800      	cmp	r0, #0
 8002c6c:	dc06      	bgt.n	8002c7c <__sflush_r+0xf8>
 8002c6e:	89a3      	ldrh	r3, [r4, #12]
 8002c70:	f04f 30ff 	mov.w	r0, #4294967295
 8002c74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c78:	81a3      	strh	r3, [r4, #12]
 8002c7a:	e790      	b.n	8002b9e <__sflush_r+0x1a>
 8002c7c:	4407      	add	r7, r0
 8002c7e:	1a36      	subs	r6, r6, r0
 8002c80:	e7ea      	b.n	8002c58 <__sflush_r+0xd4>
 8002c82:	bf00      	nop
 8002c84:	dfbffffe 	.word	0xdfbffffe

08002c88 <_fflush_r>:
 8002c88:	b538      	push	{r3, r4, r5, lr}
 8002c8a:	690b      	ldr	r3, [r1, #16]
 8002c8c:	4605      	mov	r5, r0
 8002c8e:	460c      	mov	r4, r1
 8002c90:	b913      	cbnz	r3, 8002c98 <_fflush_r+0x10>
 8002c92:	2500      	movs	r5, #0
 8002c94:	4628      	mov	r0, r5
 8002c96:	bd38      	pop	{r3, r4, r5, pc}
 8002c98:	b118      	cbz	r0, 8002ca2 <_fflush_r+0x1a>
 8002c9a:	6a03      	ldr	r3, [r0, #32]
 8002c9c:	b90b      	cbnz	r3, 8002ca2 <_fflush_r+0x1a>
 8002c9e:	f7ff f9b1 	bl	8002004 <__sinit>
 8002ca2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d0f3      	beq.n	8002c92 <_fflush_r+0xa>
 8002caa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002cac:	07d0      	lsls	r0, r2, #31
 8002cae:	d404      	bmi.n	8002cba <_fflush_r+0x32>
 8002cb0:	0599      	lsls	r1, r3, #22
 8002cb2:	d402      	bmi.n	8002cba <_fflush_r+0x32>
 8002cb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002cb6:	f7ff fb99 	bl	80023ec <__retarget_lock_acquire_recursive>
 8002cba:	4628      	mov	r0, r5
 8002cbc:	4621      	mov	r1, r4
 8002cbe:	f7ff ff61 	bl	8002b84 <__sflush_r>
 8002cc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002cc4:	4605      	mov	r5, r0
 8002cc6:	07da      	lsls	r2, r3, #31
 8002cc8:	d4e4      	bmi.n	8002c94 <_fflush_r+0xc>
 8002cca:	89a3      	ldrh	r3, [r4, #12]
 8002ccc:	059b      	lsls	r3, r3, #22
 8002cce:	d4e1      	bmi.n	8002c94 <_fflush_r+0xc>
 8002cd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002cd2:	f7ff fb8c 	bl	80023ee <__retarget_lock_release_recursive>
 8002cd6:	e7dd      	b.n	8002c94 <_fflush_r+0xc>

08002cd8 <__swhatbuf_r>:
 8002cd8:	b570      	push	{r4, r5, r6, lr}
 8002cda:	460c      	mov	r4, r1
 8002cdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ce0:	4615      	mov	r5, r2
 8002ce2:	2900      	cmp	r1, #0
 8002ce4:	461e      	mov	r6, r3
 8002ce6:	b096      	sub	sp, #88	; 0x58
 8002ce8:	da0c      	bge.n	8002d04 <__swhatbuf_r+0x2c>
 8002cea:	89a3      	ldrh	r3, [r4, #12]
 8002cec:	2100      	movs	r1, #0
 8002cee:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002cf2:	bf0c      	ite	eq
 8002cf4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8002cf8:	2340      	movne	r3, #64	; 0x40
 8002cfa:	2000      	movs	r0, #0
 8002cfc:	6031      	str	r1, [r6, #0]
 8002cfe:	602b      	str	r3, [r5, #0]
 8002d00:	b016      	add	sp, #88	; 0x58
 8002d02:	bd70      	pop	{r4, r5, r6, pc}
 8002d04:	466a      	mov	r2, sp
 8002d06:	f000 f849 	bl	8002d9c <_fstat_r>
 8002d0a:	2800      	cmp	r0, #0
 8002d0c:	dbed      	blt.n	8002cea <__swhatbuf_r+0x12>
 8002d0e:	9901      	ldr	r1, [sp, #4]
 8002d10:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8002d14:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8002d18:	4259      	negs	r1, r3
 8002d1a:	4159      	adcs	r1, r3
 8002d1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d20:	e7eb      	b.n	8002cfa <__swhatbuf_r+0x22>

08002d22 <__smakebuf_r>:
 8002d22:	898b      	ldrh	r3, [r1, #12]
 8002d24:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002d26:	079d      	lsls	r5, r3, #30
 8002d28:	4606      	mov	r6, r0
 8002d2a:	460c      	mov	r4, r1
 8002d2c:	d507      	bpl.n	8002d3e <__smakebuf_r+0x1c>
 8002d2e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002d32:	6023      	str	r3, [r4, #0]
 8002d34:	6123      	str	r3, [r4, #16]
 8002d36:	2301      	movs	r3, #1
 8002d38:	6163      	str	r3, [r4, #20]
 8002d3a:	b002      	add	sp, #8
 8002d3c:	bd70      	pop	{r4, r5, r6, pc}
 8002d3e:	466a      	mov	r2, sp
 8002d40:	ab01      	add	r3, sp, #4
 8002d42:	f7ff ffc9 	bl	8002cd8 <__swhatbuf_r>
 8002d46:	9900      	ldr	r1, [sp, #0]
 8002d48:	4605      	mov	r5, r0
 8002d4a:	4630      	mov	r0, r6
 8002d4c:	f7ff fbb8 	bl	80024c0 <_malloc_r>
 8002d50:	b948      	cbnz	r0, 8002d66 <__smakebuf_r+0x44>
 8002d52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d56:	059a      	lsls	r2, r3, #22
 8002d58:	d4ef      	bmi.n	8002d3a <__smakebuf_r+0x18>
 8002d5a:	f023 0303 	bic.w	r3, r3, #3
 8002d5e:	f043 0302 	orr.w	r3, r3, #2
 8002d62:	81a3      	strh	r3, [r4, #12]
 8002d64:	e7e3      	b.n	8002d2e <__smakebuf_r+0xc>
 8002d66:	89a3      	ldrh	r3, [r4, #12]
 8002d68:	6020      	str	r0, [r4, #0]
 8002d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d6e:	81a3      	strh	r3, [r4, #12]
 8002d70:	9b00      	ldr	r3, [sp, #0]
 8002d72:	6120      	str	r0, [r4, #16]
 8002d74:	6163      	str	r3, [r4, #20]
 8002d76:	9b01      	ldr	r3, [sp, #4]
 8002d78:	b15b      	cbz	r3, 8002d92 <__smakebuf_r+0x70>
 8002d7a:	4630      	mov	r0, r6
 8002d7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d80:	f000 f81e 	bl	8002dc0 <_isatty_r>
 8002d84:	b128      	cbz	r0, 8002d92 <__smakebuf_r+0x70>
 8002d86:	89a3      	ldrh	r3, [r4, #12]
 8002d88:	f023 0303 	bic.w	r3, r3, #3
 8002d8c:	f043 0301 	orr.w	r3, r3, #1
 8002d90:	81a3      	strh	r3, [r4, #12]
 8002d92:	89a3      	ldrh	r3, [r4, #12]
 8002d94:	431d      	orrs	r5, r3
 8002d96:	81a5      	strh	r5, [r4, #12]
 8002d98:	e7cf      	b.n	8002d3a <__smakebuf_r+0x18>
	...

08002d9c <_fstat_r>:
 8002d9c:	b538      	push	{r3, r4, r5, lr}
 8002d9e:	2300      	movs	r3, #0
 8002da0:	4d06      	ldr	r5, [pc, #24]	; (8002dbc <_fstat_r+0x20>)
 8002da2:	4604      	mov	r4, r0
 8002da4:	4608      	mov	r0, r1
 8002da6:	4611      	mov	r1, r2
 8002da8:	602b      	str	r3, [r5, #0]
 8002daa:	f7fd fe8e 	bl	8000aca <_fstat>
 8002dae:	1c43      	adds	r3, r0, #1
 8002db0:	d102      	bne.n	8002db8 <_fstat_r+0x1c>
 8002db2:	682b      	ldr	r3, [r5, #0]
 8002db4:	b103      	cbz	r3, 8002db8 <_fstat_r+0x1c>
 8002db6:	6023      	str	r3, [r4, #0]
 8002db8:	bd38      	pop	{r3, r4, r5, pc}
 8002dba:	bf00      	nop
 8002dbc:	20000274 	.word	0x20000274

08002dc0 <_isatty_r>:
 8002dc0:	b538      	push	{r3, r4, r5, lr}
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	4d05      	ldr	r5, [pc, #20]	; (8002ddc <_isatty_r+0x1c>)
 8002dc6:	4604      	mov	r4, r0
 8002dc8:	4608      	mov	r0, r1
 8002dca:	602b      	str	r3, [r5, #0]
 8002dcc:	f7fd fe8c 	bl	8000ae8 <_isatty>
 8002dd0:	1c43      	adds	r3, r0, #1
 8002dd2:	d102      	bne.n	8002dda <_isatty_r+0x1a>
 8002dd4:	682b      	ldr	r3, [r5, #0]
 8002dd6:	b103      	cbz	r3, 8002dda <_isatty_r+0x1a>
 8002dd8:	6023      	str	r3, [r4, #0]
 8002dda:	bd38      	pop	{r3, r4, r5, pc}
 8002ddc:	20000274 	.word	0x20000274

08002de0 <_sbrk_r>:
 8002de0:	b538      	push	{r3, r4, r5, lr}
 8002de2:	2300      	movs	r3, #0
 8002de4:	4d05      	ldr	r5, [pc, #20]	; (8002dfc <_sbrk_r+0x1c>)
 8002de6:	4604      	mov	r4, r0
 8002de8:	4608      	mov	r0, r1
 8002dea:	602b      	str	r3, [r5, #0]
 8002dec:	f7fd fe92 	bl	8000b14 <_sbrk>
 8002df0:	1c43      	adds	r3, r0, #1
 8002df2:	d102      	bne.n	8002dfa <_sbrk_r+0x1a>
 8002df4:	682b      	ldr	r3, [r5, #0]
 8002df6:	b103      	cbz	r3, 8002dfa <_sbrk_r+0x1a>
 8002df8:	6023      	str	r3, [r4, #0]
 8002dfa:	bd38      	pop	{r3, r4, r5, pc}
 8002dfc:	20000274 	.word	0x20000274

08002e00 <memchr>:
 8002e00:	4603      	mov	r3, r0
 8002e02:	b510      	push	{r4, lr}
 8002e04:	b2c9      	uxtb	r1, r1
 8002e06:	4402      	add	r2, r0
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	d101      	bne.n	8002e12 <memchr+0x12>
 8002e0e:	2000      	movs	r0, #0
 8002e10:	e003      	b.n	8002e1a <memchr+0x1a>
 8002e12:	7804      	ldrb	r4, [r0, #0]
 8002e14:	3301      	adds	r3, #1
 8002e16:	428c      	cmp	r4, r1
 8002e18:	d1f6      	bne.n	8002e08 <memchr+0x8>
 8002e1a:	bd10      	pop	{r4, pc}

08002e1c <_init>:
 8002e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e1e:	bf00      	nop
 8002e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e22:	bc08      	pop	{r3}
 8002e24:	469e      	mov	lr, r3
 8002e26:	4770      	bx	lr

08002e28 <_fini>:
 8002e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e2a:	bf00      	nop
 8002e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e2e:	bc08      	pop	{r3}
 8002e30:	469e      	mov	lr, r3
 8002e32:	4770      	bx	lr
